/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.viatra.dse.ui.contentassist

import java.util.HashSet
import java.util.Iterator
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EPackage
import org.eclipse.viatra.query.runtime.registry.IQuerySpecificationRegistryEntry
import org.eclipse.viatra.query.runtime.registry.QuerySpecificationRegistry
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class DdslProposalProvider extends AbstractDdslProposalProvider {
	def getQueryName(String queryFQN) {
		var String[] segments = queryFQN.split("\\.")
		var count = queryFQN.length - queryFQN.replace(".", "").length;
		var name = queryFQN
		if (count > 0) {
			name = segments.get(count)
		}
		return name
	}

	def getMetaModelNames() {
		var EPackage.Registry registry = EPackage.Registry.INSTANCE;
		for (String key : new HashSet<String>(registry.keySet())) {
			var EPackage ePackage = registry.getEPackage(key);
			System.out.println(ePackage.getName());
		}
		return new HashSet<String>(registry.keySet())
	}

	override public void completeQueryConstraint_ConstraintName(EObject model, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.completeQueryConstraint_Name(model, assignment, context, acceptor);

		var Iterator<IQuerySpecificationRegistryEntry> iter = QuerySpecificationRegistry.getInstance().getDefaultView().
			getEntries().iterator();
		while (iter.hasNext()) {
			var IQuerySpecificationRegistryEntry element = iter.next();
			var proposal = getQueryName(element.getFullyQualifiedName());
			acceptor.accept(createCompletionProposal(getQueryName(proposal), context))
		}

	}

	override public void completeMetaModel_Name(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeMetaModel_Name(model, assignment, context, acceptor)
		var EPackage.Registry registry = EPackage.Registry.INSTANCE;
		for (String key : registry.keySet) {
			acceptor.accept(createCompletionProposal(key, context))
		}
	}
}
