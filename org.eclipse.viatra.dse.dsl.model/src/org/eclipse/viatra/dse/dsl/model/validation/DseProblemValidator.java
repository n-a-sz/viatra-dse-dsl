/**
 *
 * $Id$
 */
package org.eclipse.viatra.dse.dsl.model.validation;

import org.eclipse.emf.common.util.EList;

import org.eclipse.viatra.dse.dsl.model.BaseObjective;
import org.eclipse.viatra.dse.dsl.model.Configuration;
import org.eclipse.viatra.dse.dsl.model.Constraint;
import org.eclipse.viatra.dse.dsl.model.InitialModel;
import org.eclipse.viatra.dse.dsl.model.MetaModel;
import org.eclipse.viatra.dse.dsl.model.SolutionStore;
import org.eclipse.viatra.dse.dsl.model.StateCoder;
import org.eclipse.viatra.dse.dsl.model.TransformationRule;

/**
 * A sample validator interface for {@link org.eclipse.viatra.dse.dsl.model.DseProblem}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface DseProblemValidator {
	boolean validate();

	boolean validateConfigurations(Configuration value);
	boolean validateConstraints(EList<Constraint> value);
	boolean validateInitialmodel(InitialModel value);
	boolean validateMetamodel(MetaModel value);
	boolean validateObjectives(EList<BaseObjective> value);
	boolean validateTransformationrules(EList<TransformationRule> value);
	boolean validateStatecoder(StateCoder value);
	boolean validateSolutionstore(SolutionStore value);
	boolean validateName(String value);
}
