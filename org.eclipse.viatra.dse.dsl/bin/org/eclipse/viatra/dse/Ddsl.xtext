// automatically generated by Xtext
grammar org.eclipse.viatra.dse.Ddsl with org.eclipse.xtext.common.Terminals

import "org.eclipse.viatra.dse.dsl.dseexecutionmodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DomainModel returns DomainModel:
	(type+=Type)*;

DseExecutionModel returns DseExecutionModel:
	{DseExecutionModel}
	'ExecutionModel'
	name=ID	':'
	('packageName' packageName=EString)?
	('configurations' '(' configurations+=[Configuration|EString] ("," configurations+=[Configuration|EString])* ')')?
	(dseproblems+=[DseProblem|ID])*
	('runs' numberOfRuns=EInt)?
	('dseproblemcomponents' '(' dseproblemcomponents+=[DseProblemComponent|EString] (","
	dseproblemcomponents+=[DseProblemComponent|EString])* ')')?
	';';

DseProblem returns DseProblem:
	'Problem'
	name=ID	':'
		('imports' ':'  imports+=EString (',' imports+=EString)* (';')? )?
		('Configuration' ':'  configurations=[Configuration|EString])?
		('Constraint' ':' constraints+=[Constraint|ID] ("," constraints+=[Constraint|ID])* )?
		('InitialModel' ':'  initialmodel=[InitialModel|ID])?
		('MetaModel' ':'  metamodel=[MetaModel|EString])?
		'objectives' ':'  objectives+=[BaseObjective|EString] (',' objectives+=[BaseObjective|ID]) * 
		'Rules' ':'  transformationrules+=[TransformationRule|ID] (',' transformationrules+=[TransformationRule|ID])*
		('StateCoder'':'   statecoder=[StateCoder|ID])?
		('SolutionStore' ':'  solutionstore=[SolutionStore|ID])?';';

Configuration returns Configuration:
	{Configuration}
	'Configuration'
	name=ID	':'
		('maxNumberOfThreads' '=' maxNumberOfThreads=EInt)?
		('dseproblems' '(' dseproblems+=[DseProblem|EString] ("," dseproblems+=[DseProblem|EString])* ')')?
		(strategy=[BaseStrategy|EString])?
	';';
	
	
BaseStrategy returns BaseStrategy:
	Strategy | EvolutionaryStrategyBuilder;


Strategy returns Strategy:
	{Strategy}
	'Strategy'
	name=ID	':'
		(type=StrategyType)
		('('depth=EInt')')?
	';';

Constraint_Impl returns Constraint:
	{Constraint}
	'Constraint' constraintName=ID;

InitialModel returns InitialModel:
	{InitialModel}
	'InitialModel' 
	name=ID ':'
	(path=EString )?
	';';

MetaModel returns MetaModel:
	{MetaModel}
	'MetaModel' (name=EString) ';';

BaseObjective_Impl returns BaseObjective:
	{BaseObjective}
	'BaseObjective'
	name=ID	 
	(':')?
		(fitnessConstraint=EDouble)?
		(comparator=Comparators)?
	';';

TransformationRule returns TransformationRule:
	{TransformationRule}
	'Rule'
	name=ID	':'
	className=EString'.'methodName=EString'()'';'
	;

StateCoder returns StateCoder:
	{StateCoder}
	'StateCoder'
	name=ID ';';

ConstraintsObjective returns ConstraintsObjective:
	{ConstraintsObjective}
	'ConstraintsObjective'
	name=ID	':'
		(fitnessConstraint=EDouble)?
		('hardConstraints'  hardConstraints+=QueryConstraint )*
		('softConstraints'  softConstraints+=QueryConstraint )*
		(comparator=Comparators)?
	';';

QueryConstraint returns QueryConstraint:
	{QueryConstraint}
	
	'('
		name=ID 
		(',' constraintName=EString)?
		(',' weight=EDouble)?
		(',' type=ModelQueryType)?
	')';

SolutionStore returns SolutionStore:
	{SolutionStore}
	'SolutionStore'
	name=ID	':'
		(foundSolutions=EInt)?
		(acceptAnySolutions?='acceptAnySolutions')?
		(storeBestSolutionsOnly?='storeBestSolutionsOnly')?
		(logSolutionsWhenFound?='logSolutionsWhenFound')?
		(registerSolutionFoundHandler?='registerSolutionFoundHandler')?
	';';

DseImport_Impl returns DseImport:
	{DseImport}
	'DseImport'
	(imports+=EString)*;

EvolutionaryStrategyBuilder returns EvolutionaryStrategyBuilder:
	{EvolutionaryStrategyBuilder}
	'EvolutionaryStrategyBuilder'
	name=ID	':'
		(populationSize=EInt)?
		(type=EvolutionStrategyType)?
		('crossOvers' '(' crossOvers+=EString ("," crossOvers+=EString)* ')')?
		('mutations' '(' mutations+=[IMutationRate|ID] ("," mutations+=[IMutationRate|ID])* ')')?
	';';

Type returns Type:
	Type_Impl | DseExecutionModel | DseProblem | Configuration | Strategy | Constraint_Impl | InitialModel | MetaModel |
	BaseObjective_Impl | TransformationRule | StateCoder | ConstraintsObjective | QueryConstraint | SolutionStore |
	DseImport_Impl | EvolutionaryStrategyBuilder | IMutationRate;

DseProblemComponent returns DseProblemComponent:
	Constraint_Impl | InitialModel | MetaModel | BaseObjective_Impl | TransformationRule | StateCoder |
	ConstraintsObjective | QueryConstraint | SolutionStore;

Constraint returns Constraint:
	Constraint_Impl | QueryConstraint;

BaseObjective returns BaseObjective:
	BaseObjective_Impl | ConstraintsObjective;

Type_Impl returns Type:
	{Type}
	'Type';
	
IMutationRate returns IMutationRate:
	{IMutationRate}
	'Mutation' name=ID '('(weight=EInt)?')' ';'
	;

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

enum StrategyType returns StrategyType:
	DfsStrategy='DfsStrategy' | BfsStrategy='BfsStrategy' | FixedPriorityStrategy='FixedPriorityStrategy' |
	HillClimbingStrategy='HillClimbingStrategy';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;

enum Comparators returns Comparators:
	HIGHER_IS_BETTER='HIGHER_IS_BETTER' | LOWER_IS_BETTER='LOWER_IS_BETTER' |
	DIFFERENCE_TO_ZERO_IS_BETTER='DIFFERENCE_TO_ZERO_IS_BETTER';

enum ModelQueryType returns ModelQueryType:
	MUST_HAVE_MATCH='MUST_HAVE_MATCH' | NO_MATCH='NO_MATCH';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum EvolutionStrategyType returns EvolutionStrategyType:
	Nsga2='Nsga2' | Pesa='Pesa';

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;