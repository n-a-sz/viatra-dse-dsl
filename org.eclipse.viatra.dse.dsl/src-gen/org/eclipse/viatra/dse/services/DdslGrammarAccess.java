/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.viatra.dse.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DdslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.DomainModel");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//DomainModel:
		//	type+=Type*;
		@Override public ParserRule getRule() { return rule; }
		
		//type+=Type*
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0() { return cTypeTypeParserRuleCall_0; }
	}
	public class DseExecutionModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.DseExecutionModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDseExecutionModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExecutionModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPackageNameKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPackageNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPackageNameEStringParserRuleCall_4_1_0 = (RuleCall)cPackageNameAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConfigurationsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cConfigurationsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cConfigurationsConfigurationCrossReference_5_2_0 = (CrossReference)cConfigurationsAssignment_5_2.eContents().get(0);
		private final RuleCall cConfigurationsConfigurationEStringParserRuleCall_5_2_0_1 = (RuleCall)cConfigurationsConfigurationCrossReference_5_2_0.eContents().get(1);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cConfigurationsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final CrossReference cConfigurationsConfigurationCrossReference_5_3_1_0 = (CrossReference)cConfigurationsAssignment_5_3_1.eContents().get(0);
		private final RuleCall cConfigurationsConfigurationEStringParserRuleCall_5_3_1_0_1 = (RuleCall)cConfigurationsConfigurationCrossReference_5_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cDseproblemsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cDseproblemsDseProblemCrossReference_6_0 = (CrossReference)cDseproblemsAssignment_6.eContents().get(0);
		private final RuleCall cDseproblemsDseProblemIDTerminalRuleCall_6_0_1 = (RuleCall)cDseproblemsDseProblemCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cRunsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cNumberOfRunsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cNumberOfRunsEIntParserRuleCall_7_1_0 = (RuleCall)cNumberOfRunsAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDseproblemcomponentsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cDseproblemcomponentsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final CrossReference cDseproblemcomponentsDseProblemComponentCrossReference_8_2_0 = (CrossReference)cDseproblemcomponentsAssignment_8_2.eContents().get(0);
		private final RuleCall cDseproblemcomponentsDseProblemComponentEStringParserRuleCall_8_2_0_1 = (RuleCall)cDseproblemcomponentsDseProblemComponentCrossReference_8_2_0.eContents().get(1);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cCommaKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cDseproblemcomponentsAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final CrossReference cDseproblemcomponentsDseProblemComponentCrossReference_8_3_1_0 = (CrossReference)cDseproblemcomponentsAssignment_8_3_1.eContents().get(0);
		private final RuleCall cDseproblemcomponentsDseProblemComponentEStringParserRuleCall_8_3_1_0_1 = (RuleCall)cDseproblemcomponentsDseProblemComponentCrossReference_8_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//DseExecutionModel:
		//	{DseExecutionModel}
		//	'ExecutionModel'
		//	name=ID ':' ('packageName' packageName=EString)? ('configurations' '(' configurations+=[Configuration|EString] (","
		//	configurations+=[Configuration|EString])* ')')?
		//	dseproblems+=[DseProblem]* ('runs' numberOfRuns=EInt)? ('dseproblemcomponents' '('
		//	dseproblemcomponents+=[DseProblemComponent|EString] (","
		//	dseproblemcomponents+=[DseProblemComponent|EString])* ')')?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{DseExecutionModel} 'ExecutionModel' name=ID ':' ('packageName' packageName=EString)? ('configurations' '('
		//configurations+=[Configuration|EString] ("," configurations+=[Configuration|EString])* ')')?
		//dseproblems+=[DseProblem]* ('runs' numberOfRuns=EInt)? ('dseproblemcomponents' '('
		//dseproblemcomponents+=[DseProblemComponent|EString] ("," dseproblemcomponents+=[DseProblemComponent|EString])* ')')?
		//';'
		public Group getGroup() { return cGroup; }
		
		//{DseExecutionModel}
		public Action getDseExecutionModelAction_0() { return cDseExecutionModelAction_0; }
		
		//'ExecutionModel'
		public Keyword getExecutionModelKeyword_1() { return cExecutionModelKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//('packageName' packageName=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'packageName'
		public Keyword getPackageNameKeyword_4_0() { return cPackageNameKeyword_4_0; }
		
		//packageName=EString
		public Assignment getPackageNameAssignment_4_1() { return cPackageNameAssignment_4_1; }
		
		//EString
		public RuleCall getPackageNameEStringParserRuleCall_4_1_0() { return cPackageNameEStringParserRuleCall_4_1_0; }
		
		//('configurations' '(' configurations+=[Configuration|EString] ("," configurations+=[Configuration|EString])* ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'configurations'
		public Keyword getConfigurationsKeyword_5_0() { return cConfigurationsKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//configurations+=[Configuration|EString]
		public Assignment getConfigurationsAssignment_5_2() { return cConfigurationsAssignment_5_2; }
		
		//[Configuration|EString]
		public CrossReference getConfigurationsConfigurationCrossReference_5_2_0() { return cConfigurationsConfigurationCrossReference_5_2_0; }
		
		//EString
		public RuleCall getConfigurationsConfigurationEStringParserRuleCall_5_2_0_1() { return cConfigurationsConfigurationEStringParserRuleCall_5_2_0_1; }
		
		//("," configurations+=[Configuration|EString])*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//configurations+=[Configuration|EString]
		public Assignment getConfigurationsAssignment_5_3_1() { return cConfigurationsAssignment_5_3_1; }
		
		//[Configuration|EString]
		public CrossReference getConfigurationsConfigurationCrossReference_5_3_1_0() { return cConfigurationsConfigurationCrossReference_5_3_1_0; }
		
		//EString
		public RuleCall getConfigurationsConfigurationEStringParserRuleCall_5_3_1_0_1() { return cConfigurationsConfigurationEStringParserRuleCall_5_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//dseproblems+=[DseProblem]*
		public Assignment getDseproblemsAssignment_6() { return cDseproblemsAssignment_6; }
		
		//[DseProblem]
		public CrossReference getDseproblemsDseProblemCrossReference_6_0() { return cDseproblemsDseProblemCrossReference_6_0; }
		
		//ID
		public RuleCall getDseproblemsDseProblemIDTerminalRuleCall_6_0_1() { return cDseproblemsDseProblemIDTerminalRuleCall_6_0_1; }
		
		//('runs' numberOfRuns=EInt)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'runs'
		public Keyword getRunsKeyword_7_0() { return cRunsKeyword_7_0; }
		
		//numberOfRuns=EInt
		public Assignment getNumberOfRunsAssignment_7_1() { return cNumberOfRunsAssignment_7_1; }
		
		//EInt
		public RuleCall getNumberOfRunsEIntParserRuleCall_7_1_0() { return cNumberOfRunsEIntParserRuleCall_7_1_0; }
		
		//('dseproblemcomponents' '(' dseproblemcomponents+=[DseProblemComponent|EString] (","
		//dseproblemcomponents+=[DseProblemComponent|EString])* ')')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'dseproblemcomponents'
		public Keyword getDseproblemcomponentsKeyword_8_0() { return cDseproblemcomponentsKeyword_8_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }
		
		//dseproblemcomponents+=[DseProblemComponent|EString]
		public Assignment getDseproblemcomponentsAssignment_8_2() { return cDseproblemcomponentsAssignment_8_2; }
		
		//[DseProblemComponent|EString]
		public CrossReference getDseproblemcomponentsDseProblemComponentCrossReference_8_2_0() { return cDseproblemcomponentsDseProblemComponentCrossReference_8_2_0; }
		
		//EString
		public RuleCall getDseproblemcomponentsDseProblemComponentEStringParserRuleCall_8_2_0_1() { return cDseproblemcomponentsDseProblemComponentEStringParserRuleCall_8_2_0_1; }
		
		//("," dseproblemcomponents+=[DseProblemComponent|EString])*
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//","
		public Keyword getCommaKeyword_8_3_0() { return cCommaKeyword_8_3_0; }
		
		//dseproblemcomponents+=[DseProblemComponent|EString]
		public Assignment getDseproblemcomponentsAssignment_8_3_1() { return cDseproblemcomponentsAssignment_8_3_1; }
		
		//[DseProblemComponent|EString]
		public CrossReference getDseproblemcomponentsDseProblemComponentCrossReference_8_3_1_0() { return cDseproblemcomponentsDseProblemComponentCrossReference_8_3_1_0; }
		
		//EString
		public RuleCall getDseproblemcomponentsDseProblemComponentEStringParserRuleCall_8_3_1_0_1() { return cDseproblemcomponentsDseProblemComponentEStringParserRuleCall_8_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class DseProblemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.DseProblem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProblemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImportsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cImportsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cImportsEStringParserRuleCall_3_2_0 = (RuleCall)cImportsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cImportsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cImportsEStringParserRuleCall_3_3_1_0 = (RuleCall)cImportsAssignment_3_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConfigurationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cConfigurationsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cConfigurationsConfigurationCrossReference_4_2_0 = (CrossReference)cConfigurationsAssignment_4_2.eContents().get(0);
		private final RuleCall cConfigurationsConfigurationEStringParserRuleCall_4_2_0_1 = (RuleCall)cConfigurationsConfigurationCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConstraintKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cConstraintsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cConstraintsConstraintCrossReference_5_2_0 = (CrossReference)cConstraintsAssignment_5_2.eContents().get(0);
		private final RuleCall cConstraintsConstraintIDTerminalRuleCall_5_2_0_1 = (RuleCall)cConstraintsConstraintCrossReference_5_2_0.eContents().get(1);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final CrossReference cConstraintsConstraintCrossReference_5_3_1_0 = (CrossReference)cConstraintsAssignment_5_3_1.eContents().get(0);
		private final RuleCall cConstraintsConstraintIDTerminalRuleCall_5_3_1_0_1 = (RuleCall)cConstraintsConstraintCrossReference_5_3_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cInitialModelKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cInitialmodelAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cInitialmodelInitialModelCrossReference_6_2_0 = (CrossReference)cInitialmodelAssignment_6_2.eContents().get(0);
		private final RuleCall cInitialmodelInitialModelIDTerminalRuleCall_6_2_0_1 = (RuleCall)cInitialmodelInitialModelCrossReference_6_2_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cMetaModelKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cColonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cMetamodelAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cMetamodelMetaModelCrossReference_7_2_0 = (CrossReference)cMetamodelAssignment_7_2.eContents().get(0);
		private final RuleCall cMetamodelMetaModelEStringParserRuleCall_7_2_0_1 = (RuleCall)cMetamodelMetaModelCrossReference_7_2_0.eContents().get(1);
		private final Keyword cObjectivesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cObjectivesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cObjectivesBaseObjectiveCrossReference_10_0 = (CrossReference)cObjectivesAssignment_10.eContents().get(0);
		private final RuleCall cObjectivesBaseObjectiveEStringParserRuleCall_10_0_1 = (RuleCall)cObjectivesBaseObjectiveCrossReference_10_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cObjectivesAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cObjectivesBaseObjectiveCrossReference_11_1_0 = (CrossReference)cObjectivesAssignment_11_1.eContents().get(0);
		private final RuleCall cObjectivesBaseObjectiveIDTerminalRuleCall_11_1_0_1 = (RuleCall)cObjectivesBaseObjectiveCrossReference_11_1_0.eContents().get(1);
		private final Keyword cRulesKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cColonKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cTransformationrulesAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final CrossReference cTransformationrulesTransformationRuleCrossReference_14_0 = (CrossReference)cTransformationrulesAssignment_14.eContents().get(0);
		private final RuleCall cTransformationrulesTransformationRuleIDTerminalRuleCall_14_0_1 = (RuleCall)cTransformationrulesTransformationRuleCrossReference_14_0.eContents().get(1);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cCommaKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Assignment cTransformationrulesAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final CrossReference cTransformationrulesTransformationRuleCrossReference_15_1_0 = (CrossReference)cTransformationrulesAssignment_15_1.eContents().get(0);
		private final RuleCall cTransformationrulesTransformationRuleIDTerminalRuleCall_15_1_0_1 = (RuleCall)cTransformationrulesTransformationRuleCrossReference_15_1_0.eContents().get(1);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cStateCoderKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Keyword cColonKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Assignment cStatecoderAssignment_16_2 = (Assignment)cGroup_16.eContents().get(2);
		private final CrossReference cStatecoderStateCoderCrossReference_16_2_0 = (CrossReference)cStatecoderAssignment_16_2.eContents().get(0);
		private final RuleCall cStatecoderStateCoderIDTerminalRuleCall_16_2_0_1 = (RuleCall)cStatecoderStateCoderCrossReference_16_2_0.eContents().get(1);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Keyword cSolutionStoreKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Keyword cColonKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Assignment cSolutionstoreAssignment_17_2 = (Assignment)cGroup_17.eContents().get(2);
		private final CrossReference cSolutionstoreSolutionStoreCrossReference_17_2_0 = (CrossReference)cSolutionstoreAssignment_17_2.eContents().get(0);
		private final RuleCall cSolutionstoreSolutionStoreIDTerminalRuleCall_17_2_0_1 = (RuleCall)cSolutionstoreSolutionStoreCrossReference_17_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_18 = (Keyword)cGroup.eContents().get(18);
		
		//DseProblem:
		//	'Problem'
		//	name=ID ':' ('imports' ':' imports+=EString (',' imports+=EString)* ';'?)? ('Configuration' ':'
		//	configurations=[Configuration|EString])? ('Constraint' ':' constraints+=[Constraint] (","
		//	constraints+=[Constraint])*)? ('InitialModel' ':' initialmodel=[InitialModel])? ('MetaModel' ':'
		//	metamodel=[MetaModel|EString])?
		//	'objectives' ':' objectives+=[BaseObjective|EString] (',' objectives+=[BaseObjective])*
		//	'Rules' ':' transformationrules+=[TransformationRule] (',' transformationrules+=[TransformationRule])* ('StateCoder'
		//	':' statecoder=[StateCoder])? ('SolutionStore' ':' solutionstore=[SolutionStore])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Problem' name=ID ':' ('imports' ':' imports+=EString (',' imports+=EString)* ';'?)? ('Configuration' ':'
		//configurations=[Configuration|EString])? ('Constraint' ':' constraints+=[Constraint] (","
		//constraints+=[Constraint])*)? ('InitialModel' ':' initialmodel=[InitialModel])? ('MetaModel' ':'
		//metamodel=[MetaModel|EString])? 'objectives' ':' objectives+=[BaseObjective|EString] (','
		//objectives+=[BaseObjective])* 'Rules' ':' transformationrules+=[TransformationRule] (','
		//transformationrules+=[TransformationRule])* ('StateCoder' ':' statecoder=[StateCoder])? ('SolutionStore' ':'
		//solutionstore=[SolutionStore])? ';'
		public Group getGroup() { return cGroup; }
		
		//'Problem'
		public Keyword getProblemKeyword_0() { return cProblemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//('imports' ':' imports+=EString (',' imports+=EString)* ';'?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'imports'
		public Keyword getImportsKeyword_3_0() { return cImportsKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//imports+=EString
		public Assignment getImportsAssignment_3_2() { return cImportsAssignment_3_2; }
		
		//EString
		public RuleCall getImportsEStringParserRuleCall_3_2_0() { return cImportsEStringParserRuleCall_3_2_0; }
		
		//(',' imports+=EString)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//','
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//imports+=EString
		public Assignment getImportsAssignment_3_3_1() { return cImportsAssignment_3_3_1; }
		
		//EString
		public RuleCall getImportsEStringParserRuleCall_3_3_1_0() { return cImportsEStringParserRuleCall_3_3_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3_4() { return cSemicolonKeyword_3_4; }
		
		//('Configuration' ':' configurations=[Configuration|EString])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'Configuration'
		public Keyword getConfigurationKeyword_4_0() { return cConfigurationKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//configurations=[Configuration|EString]
		public Assignment getConfigurationsAssignment_4_2() { return cConfigurationsAssignment_4_2; }
		
		//[Configuration|EString]
		public CrossReference getConfigurationsConfigurationCrossReference_4_2_0() { return cConfigurationsConfigurationCrossReference_4_2_0; }
		
		//EString
		public RuleCall getConfigurationsConfigurationEStringParserRuleCall_4_2_0_1() { return cConfigurationsConfigurationEStringParserRuleCall_4_2_0_1; }
		
		//('Constraint' ':' constraints+=[Constraint] ("," constraints+=[Constraint])*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'Constraint'
		public Keyword getConstraintKeyword_5_0() { return cConstraintKeyword_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//constraints+=[Constraint]
		public Assignment getConstraintsAssignment_5_2() { return cConstraintsAssignment_5_2; }
		
		//[Constraint]
		public CrossReference getConstraintsConstraintCrossReference_5_2_0() { return cConstraintsConstraintCrossReference_5_2_0; }
		
		//ID
		public RuleCall getConstraintsConstraintIDTerminalRuleCall_5_2_0_1() { return cConstraintsConstraintIDTerminalRuleCall_5_2_0_1; }
		
		//("," constraints+=[Constraint])*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//constraints+=[Constraint]
		public Assignment getConstraintsAssignment_5_3_1() { return cConstraintsAssignment_5_3_1; }
		
		//[Constraint]
		public CrossReference getConstraintsConstraintCrossReference_5_3_1_0() { return cConstraintsConstraintCrossReference_5_3_1_0; }
		
		//ID
		public RuleCall getConstraintsConstraintIDTerminalRuleCall_5_3_1_0_1() { return cConstraintsConstraintIDTerminalRuleCall_5_3_1_0_1; }
		
		//('InitialModel' ':' initialmodel=[InitialModel])?
		public Group getGroup_6() { return cGroup_6; }
		
		//'InitialModel'
		public Keyword getInitialModelKeyword_6_0() { return cInitialModelKeyword_6_0; }
		
		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//initialmodel=[InitialModel]
		public Assignment getInitialmodelAssignment_6_2() { return cInitialmodelAssignment_6_2; }
		
		//[InitialModel]
		public CrossReference getInitialmodelInitialModelCrossReference_6_2_0() { return cInitialmodelInitialModelCrossReference_6_2_0; }
		
		//ID
		public RuleCall getInitialmodelInitialModelIDTerminalRuleCall_6_2_0_1() { return cInitialmodelInitialModelIDTerminalRuleCall_6_2_0_1; }
		
		//('MetaModel' ':' metamodel=[MetaModel|EString])?
		public Group getGroup_7() { return cGroup_7; }
		
		//'MetaModel'
		public Keyword getMetaModelKeyword_7_0() { return cMetaModelKeyword_7_0; }
		
		//':'
		public Keyword getColonKeyword_7_1() { return cColonKeyword_7_1; }
		
		//metamodel=[MetaModel|EString]
		public Assignment getMetamodelAssignment_7_2() { return cMetamodelAssignment_7_2; }
		
		//[MetaModel|EString]
		public CrossReference getMetamodelMetaModelCrossReference_7_2_0() { return cMetamodelMetaModelCrossReference_7_2_0; }
		
		//EString
		public RuleCall getMetamodelMetaModelEStringParserRuleCall_7_2_0_1() { return cMetamodelMetaModelEStringParserRuleCall_7_2_0_1; }
		
		//'objectives'
		public Keyword getObjectivesKeyword_8() { return cObjectivesKeyword_8; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//objectives+=[BaseObjective|EString]
		public Assignment getObjectivesAssignment_10() { return cObjectivesAssignment_10; }
		
		//[BaseObjective|EString]
		public CrossReference getObjectivesBaseObjectiveCrossReference_10_0() { return cObjectivesBaseObjectiveCrossReference_10_0; }
		
		//EString
		public RuleCall getObjectivesBaseObjectiveEStringParserRuleCall_10_0_1() { return cObjectivesBaseObjectiveEStringParserRuleCall_10_0_1; }
		
		//(',' objectives+=[BaseObjective])*
		public Group getGroup_11() { return cGroup_11; }
		
		//','
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }
		
		//objectives+=[BaseObjective]
		public Assignment getObjectivesAssignment_11_1() { return cObjectivesAssignment_11_1; }
		
		//[BaseObjective]
		public CrossReference getObjectivesBaseObjectiveCrossReference_11_1_0() { return cObjectivesBaseObjectiveCrossReference_11_1_0; }
		
		//ID
		public RuleCall getObjectivesBaseObjectiveIDTerminalRuleCall_11_1_0_1() { return cObjectivesBaseObjectiveIDTerminalRuleCall_11_1_0_1; }
		
		//'Rules'
		public Keyword getRulesKeyword_12() { return cRulesKeyword_12; }
		
		//':'
		public Keyword getColonKeyword_13() { return cColonKeyword_13; }
		
		//transformationrules+=[TransformationRule]
		public Assignment getTransformationrulesAssignment_14() { return cTransformationrulesAssignment_14; }
		
		//[TransformationRule]
		public CrossReference getTransformationrulesTransformationRuleCrossReference_14_0() { return cTransformationrulesTransformationRuleCrossReference_14_0; }
		
		//ID
		public RuleCall getTransformationrulesTransformationRuleIDTerminalRuleCall_14_0_1() { return cTransformationrulesTransformationRuleIDTerminalRuleCall_14_0_1; }
		
		//(',' transformationrules+=[TransformationRule])*
		public Group getGroup_15() { return cGroup_15; }
		
		//','
		public Keyword getCommaKeyword_15_0() { return cCommaKeyword_15_0; }
		
		//transformationrules+=[TransformationRule]
		public Assignment getTransformationrulesAssignment_15_1() { return cTransformationrulesAssignment_15_1; }
		
		//[TransformationRule]
		public CrossReference getTransformationrulesTransformationRuleCrossReference_15_1_0() { return cTransformationrulesTransformationRuleCrossReference_15_1_0; }
		
		//ID
		public RuleCall getTransformationrulesTransformationRuleIDTerminalRuleCall_15_1_0_1() { return cTransformationrulesTransformationRuleIDTerminalRuleCall_15_1_0_1; }
		
		//('StateCoder' ':' statecoder=[StateCoder])?
		public Group getGroup_16() { return cGroup_16; }
		
		//'StateCoder'
		public Keyword getStateCoderKeyword_16_0() { return cStateCoderKeyword_16_0; }
		
		//':'
		public Keyword getColonKeyword_16_1() { return cColonKeyword_16_1; }
		
		//statecoder=[StateCoder]
		public Assignment getStatecoderAssignment_16_2() { return cStatecoderAssignment_16_2; }
		
		//[StateCoder]
		public CrossReference getStatecoderStateCoderCrossReference_16_2_0() { return cStatecoderStateCoderCrossReference_16_2_0; }
		
		//ID
		public RuleCall getStatecoderStateCoderIDTerminalRuleCall_16_2_0_1() { return cStatecoderStateCoderIDTerminalRuleCall_16_2_0_1; }
		
		//('SolutionStore' ':' solutionstore=[SolutionStore])?
		public Group getGroup_17() { return cGroup_17; }
		
		//'SolutionStore'
		public Keyword getSolutionStoreKeyword_17_0() { return cSolutionStoreKeyword_17_0; }
		
		//':'
		public Keyword getColonKeyword_17_1() { return cColonKeyword_17_1; }
		
		//solutionstore=[SolutionStore]
		public Assignment getSolutionstoreAssignment_17_2() { return cSolutionstoreAssignment_17_2; }
		
		//[SolutionStore]
		public CrossReference getSolutionstoreSolutionStoreCrossReference_17_2_0() { return cSolutionstoreSolutionStoreCrossReference_17_2_0; }
		
		//ID
		public RuleCall getSolutionstoreSolutionStoreIDTerminalRuleCall_17_2_0_1() { return cSolutionstoreSolutionStoreIDTerminalRuleCall_17_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_18() { return cSemicolonKeyword_18; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfigurationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfigurationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMaxNumberOfThreadsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cMaxNumberOfThreadsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cMaxNumberOfThreadsEIntParserRuleCall_4_2_0 = (RuleCall)cMaxNumberOfThreadsAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDseproblemsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDseproblemsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cDseproblemsDseProblemCrossReference_5_2_0 = (CrossReference)cDseproblemsAssignment_5_2.eContents().get(0);
		private final RuleCall cDseproblemsDseProblemEStringParserRuleCall_5_2_0_1 = (RuleCall)cDseproblemsDseProblemCrossReference_5_2_0.eContents().get(1);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cDseproblemsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final CrossReference cDseproblemsDseProblemCrossReference_5_3_1_0 = (CrossReference)cDseproblemsAssignment_5_3_1.eContents().get(0);
		private final RuleCall cDseproblemsDseProblemEStringParserRuleCall_5_3_1_0_1 = (RuleCall)cDseproblemsDseProblemCrossReference_5_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cStrategyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cStrategyBaseStrategyCrossReference_6_0 = (CrossReference)cStrategyAssignment_6.eContents().get(0);
		private final RuleCall cStrategyBaseStrategyEStringParserRuleCall_6_0_1 = (RuleCall)cStrategyBaseStrategyCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Configuration:
		//	{Configuration}
		//	'Configuration'
		//	name=ID ':' ('maxNumberOfThreads' '=' maxNumberOfThreads=EInt)? ('dseproblems' '(' dseproblems+=[DseProblem|EString]
		//	("," dseproblems+=[DseProblem|EString])* ')')?
		//	strategy=[BaseStrategy|EString]?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Configuration} 'Configuration' name=ID ':' ('maxNumberOfThreads' '=' maxNumberOfThreads=EInt)? ('dseproblems' '('
		//dseproblems+=[DseProblem|EString] ("," dseproblems+=[DseProblem|EString])* ')')? strategy=[BaseStrategy|EString]? ';'
		public Group getGroup() { return cGroup; }
		
		//{Configuration}
		public Action getConfigurationAction_0() { return cConfigurationAction_0; }
		
		//'Configuration'
		public Keyword getConfigurationKeyword_1() { return cConfigurationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//('maxNumberOfThreads' '=' maxNumberOfThreads=EInt)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'maxNumberOfThreads'
		public Keyword getMaxNumberOfThreadsKeyword_4_0() { return cMaxNumberOfThreadsKeyword_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }
		
		//maxNumberOfThreads=EInt
		public Assignment getMaxNumberOfThreadsAssignment_4_2() { return cMaxNumberOfThreadsAssignment_4_2; }
		
		//EInt
		public RuleCall getMaxNumberOfThreadsEIntParserRuleCall_4_2_0() { return cMaxNumberOfThreadsEIntParserRuleCall_4_2_0; }
		
		//('dseproblems' '(' dseproblems+=[DseProblem|EString] ("," dseproblems+=[DseProblem|EString])* ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'dseproblems'
		public Keyword getDseproblemsKeyword_5_0() { return cDseproblemsKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//dseproblems+=[DseProblem|EString]
		public Assignment getDseproblemsAssignment_5_2() { return cDseproblemsAssignment_5_2; }
		
		//[DseProblem|EString]
		public CrossReference getDseproblemsDseProblemCrossReference_5_2_0() { return cDseproblemsDseProblemCrossReference_5_2_0; }
		
		//EString
		public RuleCall getDseproblemsDseProblemEStringParserRuleCall_5_2_0_1() { return cDseproblemsDseProblemEStringParserRuleCall_5_2_0_1; }
		
		//("," dseproblems+=[DseProblem|EString])*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//dseproblems+=[DseProblem|EString]
		public Assignment getDseproblemsAssignment_5_3_1() { return cDseproblemsAssignment_5_3_1; }
		
		//[DseProblem|EString]
		public CrossReference getDseproblemsDseProblemCrossReference_5_3_1_0() { return cDseproblemsDseProblemCrossReference_5_3_1_0; }
		
		//EString
		public RuleCall getDseproblemsDseProblemEStringParserRuleCall_5_3_1_0_1() { return cDseproblemsDseProblemEStringParserRuleCall_5_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//strategy=[BaseStrategy|EString]?
		public Assignment getStrategyAssignment_6() { return cStrategyAssignment_6; }
		
		//[BaseStrategy|EString]
		public CrossReference getStrategyBaseStrategyCrossReference_6_0() { return cStrategyBaseStrategyCrossReference_6_0; }
		
		//EString
		public RuleCall getStrategyBaseStrategyEStringParserRuleCall_6_0_1() { return cStrategyBaseStrategyEStringParserRuleCall_6_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class BaseStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.BaseStrategy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStrategyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEvolutionaryStrategyBuilderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BaseStrategy:
		//	Strategy | EvolutionaryStrategyBuilder;
		@Override public ParserRule getRule() { return rule; }
		
		//Strategy | EvolutionaryStrategyBuilder
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Strategy
		public RuleCall getStrategyParserRuleCall_0() { return cStrategyParserRuleCall_0; }
		
		//EvolutionaryStrategyBuilder
		public RuleCall getEvolutionaryStrategyBuilderParserRuleCall_1() { return cEvolutionaryStrategyBuilderParserRuleCall_1; }
	}
	public class StrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.Strategy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStrategyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStrategyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeStrategyTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDepthAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDepthEIntParserRuleCall_5_1_0 = (RuleCall)cDepthAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Strategy:
		//	{Strategy}
		//	'Strategy'
		//	name=ID ':'
		//	type=StrategyType ('(' depth=EInt ')')?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Strategy} 'Strategy' name=ID ':' type=StrategyType ('(' depth=EInt ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//{Strategy}
		public Action getStrategyAction_0() { return cStrategyAction_0; }
		
		//'Strategy'
		public Keyword getStrategyKeyword_1() { return cStrategyKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=StrategyType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//StrategyType
		public RuleCall getTypeStrategyTypeEnumRuleCall_4_0() { return cTypeStrategyTypeEnumRuleCall_4_0; }
		
		//('(' depth=EInt ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//depth=EInt
		public Assignment getDepthAssignment_5_1() { return cDepthAssignment_5_1; }
		
		//EInt
		public RuleCall getDepthEIntParserRuleCall_5_1_0() { return cDepthEIntParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class Constraint_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.Constraint_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstraintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstraintNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintNameIDTerminalRuleCall_2_0 = (RuleCall)cConstraintNameAssignment_2.eContents().get(0);
		
		//Constraint_Impl Constraint:
		//	{Constraint}
		//	'Constraint' constraintName=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{Constraint} 'Constraint' constraintName=ID
		public Group getGroup() { return cGroup; }
		
		//{Constraint}
		public Action getConstraintAction_0() { return cConstraintAction_0; }
		
		//'Constraint'
		public Keyword getConstraintKeyword_1() { return cConstraintKeyword_1; }
		
		//constraintName=ID
		public Assignment getConstraintNameAssignment_2() { return cConstraintNameAssignment_2; }
		
		//ID
		public RuleCall getConstraintNameIDTerminalRuleCall_2_0() { return cConstraintNameIDTerminalRuleCall_2_0; }
	}
	public class InitialModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.InitialModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitialModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInitialModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPathAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPathEStringParserRuleCall_4_0 = (RuleCall)cPathAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InitialModel:
		//	{InitialModel}
		//	'InitialModel'
		//	name=ID ':'
		//	path=EString?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{InitialModel} 'InitialModel' name=ID ':' path=EString? ';'
		public Group getGroup() { return cGroup; }
		
		//{InitialModel}
		public Action getInitialModelAction_0() { return cInitialModelAction_0; }
		
		//'InitialModel'
		public Keyword getInitialModelKeyword_1() { return cInitialModelKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//path=EString?
		public Assignment getPathAssignment_4() { return cPathAssignment_4; }
		
		//EString
		public RuleCall getPathEStringParserRuleCall_4_0() { return cPathEStringParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class MetaModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.MetaModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMetaModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMetaModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MetaModel:
		//	{MetaModel}
		//	'MetaModel' name=EString ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{MetaModel} 'MetaModel' name=EString ';'
		public Group getGroup() { return cGroup; }
		
		//{MetaModel}
		public Action getMetaModelAction_0() { return cMetaModelAction_0; }
		
		//'MetaModel'
		public Keyword getMetaModelKeyword_1() { return cMetaModelKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class BaseObjective_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.BaseObjective_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBaseObjectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBaseObjectiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFitnessConstraintAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFitnessConstraintEDoubleParserRuleCall_4_0 = (RuleCall)cFitnessConstraintAssignment_4.eContents().get(0);
		private final Assignment cComparatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComparatorComparatorsEnumRuleCall_5_0 = (RuleCall)cComparatorAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BaseObjective_Impl BaseObjective:
		//	{BaseObjective}
		//	'BaseObjective'
		//	name=ID
		//	':'?
		//	fitnessConstraint=EDouble?
		//	comparator=Comparators?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//{BaseObjective} 'BaseObjective' name=ID ':'? fitnessConstraint=EDouble? comparator=Comparators? ';'
		public Group getGroup() { return cGroup; }
		
		//{BaseObjective}
		public Action getBaseObjectiveAction_0() { return cBaseObjectiveAction_0; }
		
		//'BaseObjective'
		public Keyword getBaseObjectiveKeyword_1() { return cBaseObjectiveKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'?
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//fitnessConstraint=EDouble?
		public Assignment getFitnessConstraintAssignment_4() { return cFitnessConstraintAssignment_4; }
		
		//EDouble
		public RuleCall getFitnessConstraintEDoubleParserRuleCall_4_0() { return cFitnessConstraintEDoubleParserRuleCall_4_0; }
		
		//comparator=Comparators?
		public Assignment getComparatorAssignment_5() { return cComparatorAssignment_5; }
		
		//Comparators
		public RuleCall getComparatorComparatorsEnumRuleCall_5_0() { return cComparatorComparatorsEnumRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class TransformationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.TransformationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransformationRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cClassNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassNameEStringParserRuleCall_4_0 = (RuleCall)cClassNameAssignment_4.eContents().get(0);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMethodNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMethodNameEStringParserRuleCall_6_0 = (RuleCall)cMethodNameAssignment_6.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//TransformationRule:
		//	{TransformationRule}
		//	'Rule'
		//	name=ID ':'
		//	className=EString '.' methodName=EString '()' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{TransformationRule} 'Rule' name=ID ':' className=EString '.' methodName=EString '()' ';'
		public Group getGroup() { return cGroup; }
		
		//{TransformationRule}
		public Action getTransformationRuleAction_0() { return cTransformationRuleAction_0; }
		
		//'Rule'
		public Keyword getRuleKeyword_1() { return cRuleKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//className=EString
		public Assignment getClassNameAssignment_4() { return cClassNameAssignment_4; }
		
		//EString
		public RuleCall getClassNameEStringParserRuleCall_4_0() { return cClassNameEStringParserRuleCall_4_0; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//methodName=EString
		public Assignment getMethodNameAssignment_6() { return cMethodNameAssignment_6; }
		
		//EString
		public RuleCall getMethodNameEStringParserRuleCall_6_0() { return cMethodNameEStringParserRuleCall_6_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_7() { return cLeftParenthesisRightParenthesisKeyword_7; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class StateCoderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.StateCoder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateCoderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateCoderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StateCoder:
		//	{StateCoder}
		//	'StateCoder'
		//	name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{StateCoder} 'StateCoder' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//{StateCoder}
		public Action getStateCoderAction_0() { return cStateCoderAction_0; }
		
		//'StateCoder'
		public Keyword getStateCoderKeyword_1() { return cStateCoderKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ConstraintsObjectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.ConstraintsObjective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintsObjectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstraintsObjectiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFitnessConstraintAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFitnessConstraintEDoubleParserRuleCall_4_0 = (RuleCall)cFitnessConstraintAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHardConstraintsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cHardConstraintsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cHardConstraintsQueryConstraintParserRuleCall_5_1_0 = (RuleCall)cHardConstraintsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSoftConstraintsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSoftConstraintsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSoftConstraintsQueryConstraintParserRuleCall_6_1_0 = (RuleCall)cSoftConstraintsAssignment_6_1.eContents().get(0);
		private final Assignment cComparatorAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cComparatorComparatorsEnumRuleCall_7_0 = (RuleCall)cComparatorAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ConstraintsObjective:
		//	{ConstraintsObjective}
		//	'ConstraintsObjective'
		//	name=ID ':'
		//	fitnessConstraint=EDouble? ('hardConstraints' hardConstraints+=QueryConstraint)* ('softConstraints'
		//	softConstraints+=QueryConstraint)*
		//	comparator=Comparators?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstraintsObjective} 'ConstraintsObjective' name=ID ':' fitnessConstraint=EDouble? ('hardConstraints'
		//hardConstraints+=QueryConstraint)* ('softConstraints' softConstraints+=QueryConstraint)* comparator=Comparators? ';'
		public Group getGroup() { return cGroup; }
		
		//{ConstraintsObjective}
		public Action getConstraintsObjectiveAction_0() { return cConstraintsObjectiveAction_0; }
		
		//'ConstraintsObjective'
		public Keyword getConstraintsObjectiveKeyword_1() { return cConstraintsObjectiveKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//fitnessConstraint=EDouble?
		public Assignment getFitnessConstraintAssignment_4() { return cFitnessConstraintAssignment_4; }
		
		//EDouble
		public RuleCall getFitnessConstraintEDoubleParserRuleCall_4_0() { return cFitnessConstraintEDoubleParserRuleCall_4_0; }
		
		//('hardConstraints' hardConstraints+=QueryConstraint)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'hardConstraints'
		public Keyword getHardConstraintsKeyword_5_0() { return cHardConstraintsKeyword_5_0; }
		
		//hardConstraints+=QueryConstraint
		public Assignment getHardConstraintsAssignment_5_1() { return cHardConstraintsAssignment_5_1; }
		
		//QueryConstraint
		public RuleCall getHardConstraintsQueryConstraintParserRuleCall_5_1_0() { return cHardConstraintsQueryConstraintParserRuleCall_5_1_0; }
		
		//('softConstraints' softConstraints+=QueryConstraint)*
		public Group getGroup_6() { return cGroup_6; }
		
		//'softConstraints'
		public Keyword getSoftConstraintsKeyword_6_0() { return cSoftConstraintsKeyword_6_0; }
		
		//softConstraints+=QueryConstraint
		public Assignment getSoftConstraintsAssignment_6_1() { return cSoftConstraintsAssignment_6_1; }
		
		//QueryConstraint
		public RuleCall getSoftConstraintsQueryConstraintParserRuleCall_6_1_0() { return cSoftConstraintsQueryConstraintParserRuleCall_6_1_0; }
		
		//comparator=Comparators?
		public Assignment getComparatorAssignment_7() { return cComparatorAssignment_7; }
		
		//Comparators
		public RuleCall getComparatorComparatorsEnumRuleCall_7_0() { return cComparatorComparatorsEnumRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class QueryConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.QueryConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQueryConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConstraintNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConstraintNameEStringParserRuleCall_3_1_0 = (RuleCall)cConstraintNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWeightAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWeightEDoubleParserRuleCall_4_1_0 = (RuleCall)cWeightAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeModelQueryTypeEnumRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//QueryConstraint:
		//	{QueryConstraint}
		//	'('
		//	name=ID (',' constraintName=EString)? (',' weight=EDouble)? (',' type=ModelQueryType)?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{QueryConstraint} '(' name=ID (',' constraintName=EString)? (',' weight=EDouble)? (',' type=ModelQueryType)? ')'
		public Group getGroup() { return cGroup; }
		
		//{QueryConstraint}
		public Action getQueryConstraintAction_0() { return cQueryConstraintAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(',' constraintName=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//constraintName=EString
		public Assignment getConstraintNameAssignment_3_1() { return cConstraintNameAssignment_3_1; }
		
		//EString
		public RuleCall getConstraintNameEStringParserRuleCall_3_1_0() { return cConstraintNameEStringParserRuleCall_3_1_0; }
		
		//(',' weight=EDouble)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//weight=EDouble
		public Assignment getWeightAssignment_4_1() { return cWeightAssignment_4_1; }
		
		//EDouble
		public RuleCall getWeightEDoubleParserRuleCall_4_1_0() { return cWeightEDoubleParserRuleCall_4_1_0; }
		
		//(',' type=ModelQueryType)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//type=ModelQueryType
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }
		
		//ModelQueryType
		public RuleCall getTypeModelQueryTypeEnumRuleCall_5_1_0() { return cTypeModelQueryTypeEnumRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class SolutionStoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.SolutionStore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSolutionStoreAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSolutionStoreKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFoundSolutionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFoundSolutionsEIntParserRuleCall_4_0 = (RuleCall)cFoundSolutionsAssignment_4.eContents().get(0);
		private final Assignment cAcceptAnySolutionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cAcceptAnySolutionsAcceptAnySolutionsKeyword_5_0 = (Keyword)cAcceptAnySolutionsAssignment_5.eContents().get(0);
		private final Assignment cStoreBestSolutionsOnlyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cStoreBestSolutionsOnlyStoreBestSolutionsOnlyKeyword_6_0 = (Keyword)cStoreBestSolutionsOnlyAssignment_6.eContents().get(0);
		private final Assignment cLogSolutionsWhenFoundAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cLogSolutionsWhenFoundLogSolutionsWhenFoundKeyword_7_0 = (Keyword)cLogSolutionsWhenFoundAssignment_7.eContents().get(0);
		private final Assignment cRegisterSolutionFoundHandlerAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Keyword cRegisterSolutionFoundHandlerRegisterSolutionFoundHandlerKeyword_8_0 = (Keyword)cRegisterSolutionFoundHandlerAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//SolutionStore:
		//	{SolutionStore}
		//	'SolutionStore'
		//	name=ID ':'
		//	foundSolutions=EInt?
		//	acceptAnySolutions?='acceptAnySolutions'?
		//	storeBestSolutionsOnly?='storeBestSolutionsOnly'?
		//	logSolutionsWhenFound?='logSolutionsWhenFound'?
		//	registerSolutionFoundHandler?='registerSolutionFoundHandler'?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{SolutionStore} 'SolutionStore' name=ID ':' foundSolutions=EInt? acceptAnySolutions?='acceptAnySolutions'?
		//storeBestSolutionsOnly?='storeBestSolutionsOnly'? logSolutionsWhenFound?='logSolutionsWhenFound'?
		//registerSolutionFoundHandler?='registerSolutionFoundHandler'? ';'
		public Group getGroup() { return cGroup; }
		
		//{SolutionStore}
		public Action getSolutionStoreAction_0() { return cSolutionStoreAction_0; }
		
		//'SolutionStore'
		public Keyword getSolutionStoreKeyword_1() { return cSolutionStoreKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//foundSolutions=EInt?
		public Assignment getFoundSolutionsAssignment_4() { return cFoundSolutionsAssignment_4; }
		
		//EInt
		public RuleCall getFoundSolutionsEIntParserRuleCall_4_0() { return cFoundSolutionsEIntParserRuleCall_4_0; }
		
		//acceptAnySolutions?='acceptAnySolutions'?
		public Assignment getAcceptAnySolutionsAssignment_5() { return cAcceptAnySolutionsAssignment_5; }
		
		//'acceptAnySolutions'
		public Keyword getAcceptAnySolutionsAcceptAnySolutionsKeyword_5_0() { return cAcceptAnySolutionsAcceptAnySolutionsKeyword_5_0; }
		
		//storeBestSolutionsOnly?='storeBestSolutionsOnly'?
		public Assignment getStoreBestSolutionsOnlyAssignment_6() { return cStoreBestSolutionsOnlyAssignment_6; }
		
		//'storeBestSolutionsOnly'
		public Keyword getStoreBestSolutionsOnlyStoreBestSolutionsOnlyKeyword_6_0() { return cStoreBestSolutionsOnlyStoreBestSolutionsOnlyKeyword_6_0; }
		
		//logSolutionsWhenFound?='logSolutionsWhenFound'?
		public Assignment getLogSolutionsWhenFoundAssignment_7() { return cLogSolutionsWhenFoundAssignment_7; }
		
		//'logSolutionsWhenFound'
		public Keyword getLogSolutionsWhenFoundLogSolutionsWhenFoundKeyword_7_0() { return cLogSolutionsWhenFoundLogSolutionsWhenFoundKeyword_7_0; }
		
		//registerSolutionFoundHandler?='registerSolutionFoundHandler'?
		public Assignment getRegisterSolutionFoundHandlerAssignment_8() { return cRegisterSolutionFoundHandlerAssignment_8; }
		
		//'registerSolutionFoundHandler'
		public Keyword getRegisterSolutionFoundHandlerRegisterSolutionFoundHandlerKeyword_8_0() { return cRegisterSolutionFoundHandlerRegisterSolutionFoundHandlerKeyword_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class DseImport_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.DseImport_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDseImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDseImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsEStringParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		
		//DseImport_Impl DseImport:
		//	{DseImport}
		//	'DseImport'
		//	imports+=EString*
		@Override public ParserRule getRule() { return rule; }
		
		//{DseImport} 'DseImport' imports+=EString*
		public Group getGroup() { return cGroup; }
		
		//{DseImport}
		public Action getDseImportAction_0() { return cDseImportAction_0; }
		
		//'DseImport'
		public Keyword getDseImportKeyword_1() { return cDseImportKeyword_1; }
		
		//imports+=EString*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//EString
		public RuleCall getImportsEStringParserRuleCall_2_0() { return cImportsEStringParserRuleCall_2_0; }
	}
	public class EvolutionaryStrategyBuilderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.EvolutionaryStrategyBuilder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEvolutionaryStrategyBuilderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEvolutionaryStrategyBuilderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPopulationSizeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPopulationSizeEIntParserRuleCall_4_0 = (RuleCall)cPopulationSizeAssignment_4.eContents().get(0);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeEvolutionStrategyTypeEnumRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCrossOversKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cCrossOversAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cCrossOversEStringParserRuleCall_6_2_0 = (RuleCall)cCrossOversAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cCrossOversAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cCrossOversEStringParserRuleCall_6_3_1_0 = (RuleCall)cCrossOversAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cMutationsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cMutationsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cMutationsIMutationRateCrossReference_7_2_0 = (CrossReference)cMutationsAssignment_7_2.eContents().get(0);
		private final RuleCall cMutationsIMutationRateIDTerminalRuleCall_7_2_0_1 = (RuleCall)cMutationsIMutationRateCrossReference_7_2_0.eContents().get(1);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cMutationsAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final CrossReference cMutationsIMutationRateCrossReference_7_3_1_0 = (CrossReference)cMutationsAssignment_7_3_1.eContents().get(0);
		private final RuleCall cMutationsIMutationRateIDTerminalRuleCall_7_3_1_0_1 = (RuleCall)cMutationsIMutationRateCrossReference_7_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//EvolutionaryStrategyBuilder:
		//	{EvolutionaryStrategyBuilder}
		//	'EvolutionaryStrategyBuilder'
		//	name=ID ':'
		//	populationSize=EInt?
		//	type=EvolutionStrategyType? ('crossOvers' '(' crossOvers+=EString ("," crossOvers+=EString)* ')')? ('mutations' '('
		//	mutations+=[IMutationRate] ("," mutations+=[IMutationRate])* ')')?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{EvolutionaryStrategyBuilder} 'EvolutionaryStrategyBuilder' name=ID ':' populationSize=EInt? type=EvolutionStrategyType?
		//('crossOvers' '(' crossOvers+=EString ("," crossOvers+=EString)* ')')? ('mutations' '(' mutations+=[IMutationRate]
		//("," mutations+=[IMutationRate])* ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//{EvolutionaryStrategyBuilder}
		public Action getEvolutionaryStrategyBuilderAction_0() { return cEvolutionaryStrategyBuilderAction_0; }
		
		//'EvolutionaryStrategyBuilder'
		public Keyword getEvolutionaryStrategyBuilderKeyword_1() { return cEvolutionaryStrategyBuilderKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//populationSize=EInt?
		public Assignment getPopulationSizeAssignment_4() { return cPopulationSizeAssignment_4; }
		
		//EInt
		public RuleCall getPopulationSizeEIntParserRuleCall_4_0() { return cPopulationSizeEIntParserRuleCall_4_0; }
		
		//type=EvolutionStrategyType?
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//EvolutionStrategyType
		public RuleCall getTypeEvolutionStrategyTypeEnumRuleCall_5_0() { return cTypeEvolutionStrategyTypeEnumRuleCall_5_0; }
		
		//('crossOvers' '(' crossOvers+=EString ("," crossOvers+=EString)* ')')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'crossOvers'
		public Keyword getCrossOversKeyword_6_0() { return cCrossOversKeyword_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }
		
		//crossOvers+=EString
		public Assignment getCrossOversAssignment_6_2() { return cCrossOversAssignment_6_2; }
		
		//EString
		public RuleCall getCrossOversEStringParserRuleCall_6_2_0() { return cCrossOversEStringParserRuleCall_6_2_0; }
		
		//("," crossOvers+=EString)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//crossOvers+=EString
		public Assignment getCrossOversAssignment_6_3_1() { return cCrossOversAssignment_6_3_1; }
		
		//EString
		public RuleCall getCrossOversEStringParserRuleCall_6_3_1_0() { return cCrossOversEStringParserRuleCall_6_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
		
		//('mutations' '(' mutations+=[IMutationRate] ("," mutations+=[IMutationRate])* ')')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'mutations'
		public Keyword getMutationsKeyword_7_0() { return cMutationsKeyword_7_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }
		
		//mutations+=[IMutationRate]
		public Assignment getMutationsAssignment_7_2() { return cMutationsAssignment_7_2; }
		
		//[IMutationRate]
		public CrossReference getMutationsIMutationRateCrossReference_7_2_0() { return cMutationsIMutationRateCrossReference_7_2_0; }
		
		//ID
		public RuleCall getMutationsIMutationRateIDTerminalRuleCall_7_2_0_1() { return cMutationsIMutationRateIDTerminalRuleCall_7_2_0_1; }
		
		//("," mutations+=[IMutationRate])*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//mutations+=[IMutationRate]
		public Assignment getMutationsAssignment_7_3_1() { return cMutationsAssignment_7_3_1; }
		
		//[IMutationRate]
		public CrossReference getMutationsIMutationRateCrossReference_7_3_1_0() { return cMutationsIMutationRateCrossReference_7_3_1_0; }
		
		//ID
		public RuleCall getMutationsIMutationRateIDTerminalRuleCall_7_3_1_0_1() { return cMutationsIMutationRateIDTerminalRuleCall_7_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cType_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDseExecutionModelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDseProblemParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConfigurationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStrategyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConstraint_ImplParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInitialModelParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMetaModelParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBaseObjective_ImplParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cTransformationRuleParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cStateCoderParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cConstraintsObjectiveParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cQueryConstraintParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSolutionStoreParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDseImport_ImplParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cEvolutionaryStrategyBuilderParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cIMutationRateParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//Type:
		//	Type_Impl | DseExecutionModel | DseProblem | Configuration | Strategy | Constraint_Impl | InitialModel | MetaModel |
		//	BaseObjective_Impl | TransformationRule | StateCoder | ConstraintsObjective | QueryConstraint | SolutionStore |
		//	DseImport_Impl | EvolutionaryStrategyBuilder | IMutationRate;
		@Override public ParserRule getRule() { return rule; }
		
		//Type_Impl | DseExecutionModel | DseProblem | Configuration | Strategy | Constraint_Impl | InitialModel | MetaModel |
		//BaseObjective_Impl | TransformationRule | StateCoder | ConstraintsObjective | QueryConstraint | SolutionStore |
		//DseImport_Impl | EvolutionaryStrategyBuilder | IMutationRate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Type_Impl
		public RuleCall getType_ImplParserRuleCall_0() { return cType_ImplParserRuleCall_0; }
		
		//DseExecutionModel
		public RuleCall getDseExecutionModelParserRuleCall_1() { return cDseExecutionModelParserRuleCall_1; }
		
		//DseProblem
		public RuleCall getDseProblemParserRuleCall_2() { return cDseProblemParserRuleCall_2; }
		
		//Configuration
		public RuleCall getConfigurationParserRuleCall_3() { return cConfigurationParserRuleCall_3; }
		
		//Strategy
		public RuleCall getStrategyParserRuleCall_4() { return cStrategyParserRuleCall_4; }
		
		//Constraint_Impl
		public RuleCall getConstraint_ImplParserRuleCall_5() { return cConstraint_ImplParserRuleCall_5; }
		
		//InitialModel
		public RuleCall getInitialModelParserRuleCall_6() { return cInitialModelParserRuleCall_6; }
		
		//MetaModel
		public RuleCall getMetaModelParserRuleCall_7() { return cMetaModelParserRuleCall_7; }
		
		//BaseObjective_Impl
		public RuleCall getBaseObjective_ImplParserRuleCall_8() { return cBaseObjective_ImplParserRuleCall_8; }
		
		//TransformationRule
		public RuleCall getTransformationRuleParserRuleCall_9() { return cTransformationRuleParserRuleCall_9; }
		
		//StateCoder
		public RuleCall getStateCoderParserRuleCall_10() { return cStateCoderParserRuleCall_10; }
		
		//ConstraintsObjective
		public RuleCall getConstraintsObjectiveParserRuleCall_11() { return cConstraintsObjectiveParserRuleCall_11; }
		
		//QueryConstraint
		public RuleCall getQueryConstraintParserRuleCall_12() { return cQueryConstraintParserRuleCall_12; }
		
		//SolutionStore
		public RuleCall getSolutionStoreParserRuleCall_13() { return cSolutionStoreParserRuleCall_13; }
		
		//DseImport_Impl
		public RuleCall getDseImport_ImplParserRuleCall_14() { return cDseImport_ImplParserRuleCall_14; }
		
		//EvolutionaryStrategyBuilder
		public RuleCall getEvolutionaryStrategyBuilderParserRuleCall_15() { return cEvolutionaryStrategyBuilderParserRuleCall_15; }
		
		//IMutationRate
		public RuleCall getIMutationRateParserRuleCall_16() { return cIMutationRateParserRuleCall_16; }
	}
	public class DseProblemComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.DseProblemComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstraint_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitialModelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMetaModelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBaseObjective_ImplParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTransformationRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStateCoderParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConstraintsObjectiveParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cQueryConstraintParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSolutionStoreParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//DseProblemComponent:
		//	Constraint_Impl | InitialModel | MetaModel | BaseObjective_Impl | TransformationRule | StateCoder |
		//	ConstraintsObjective | QueryConstraint | SolutionStore;
		@Override public ParserRule getRule() { return rule; }
		
		//Constraint_Impl | InitialModel | MetaModel | BaseObjective_Impl | TransformationRule | StateCoder | ConstraintsObjective
		//| QueryConstraint | SolutionStore
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Constraint_Impl
		public RuleCall getConstraint_ImplParserRuleCall_0() { return cConstraint_ImplParserRuleCall_0; }
		
		//InitialModel
		public RuleCall getInitialModelParserRuleCall_1() { return cInitialModelParserRuleCall_1; }
		
		//MetaModel
		public RuleCall getMetaModelParserRuleCall_2() { return cMetaModelParserRuleCall_2; }
		
		//BaseObjective_Impl
		public RuleCall getBaseObjective_ImplParserRuleCall_3() { return cBaseObjective_ImplParserRuleCall_3; }
		
		//TransformationRule
		public RuleCall getTransformationRuleParserRuleCall_4() { return cTransformationRuleParserRuleCall_4; }
		
		//StateCoder
		public RuleCall getStateCoderParserRuleCall_5() { return cStateCoderParserRuleCall_5; }
		
		//ConstraintsObjective
		public RuleCall getConstraintsObjectiveParserRuleCall_6() { return cConstraintsObjectiveParserRuleCall_6; }
		
		//QueryConstraint
		public RuleCall getQueryConstraintParserRuleCall_7() { return cQueryConstraintParserRuleCall_7; }
		
		//SolutionStore
		public RuleCall getSolutionStoreParserRuleCall_8() { return cSolutionStoreParserRuleCall_8; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.Constraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstraint_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQueryConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Constraint:
		//	Constraint_Impl | QueryConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//Constraint_Impl | QueryConstraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Constraint_Impl
		public RuleCall getConstraint_ImplParserRuleCall_0() { return cConstraint_ImplParserRuleCall_0; }
		
		//QueryConstraint
		public RuleCall getQueryConstraintParserRuleCall_1() { return cQueryConstraintParserRuleCall_1; }
	}
	public class BaseObjectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.BaseObjective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBaseObjective_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstraintsObjectiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BaseObjective:
		//	BaseObjective_Impl | ConstraintsObjective;
		@Override public ParserRule getRule() { return rule; }
		
		//BaseObjective_Impl | ConstraintsObjective
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BaseObjective_Impl
		public RuleCall getBaseObjective_ImplParserRuleCall_0() { return cBaseObjective_ImplParserRuleCall_0; }
		
		//ConstraintsObjective
		public RuleCall getConstraintsObjectiveParserRuleCall_1() { return cConstraintsObjectiveParserRuleCall_1; }
	}
	public class Type_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.Type_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Type_Impl Type:
		//	{Type}
		//	'Type'
		@Override public ParserRule getRule() { return rule; }
		
		//{Type} 'Type'
		public Group getGroup() { return cGroup; }
		
		//{Type}
		public Action getTypeAction_0() { return cTypeAction_0; }
		
		//'Type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
	}
	public class IMutationRateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.IMutationRate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIMutationRateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMutationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWeightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWeightEIntParserRuleCall_4_0 = (RuleCall)cWeightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IMutationRate:
		//	{IMutationRate}
		//	'Mutation' name=ID '(' weight=EInt? ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{IMutationRate} 'Mutation' name=ID '(' weight=EInt? ')' ';'
		public Group getGroup() { return cGroup; }
		
		//{IMutationRate}
		public Action getIMutationRateAction_0() { return cIMutationRateAction_0; }
		
		//'Mutation'
		public Keyword getMutationKeyword_1() { return cMutationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//weight=EInt?
		public Assignment getWeightAssignment_4() { return cWeightAssignment_4; }
		
		//EInt
		public RuleCall getWeightEIntParserRuleCall_4_0() { return cWeightEIntParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble ecore::EDouble:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat ecore::EFloat:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	public class StrategyTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.StrategyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDfsStrategyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDfsStrategyDfsStrategyKeyword_0_0 = (Keyword)cDfsStrategyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBfsStrategyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBfsStrategyBfsStrategyKeyword_1_0 = (Keyword)cBfsStrategyEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFixedPriorityStrategyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFixedPriorityStrategyFixedPriorityStrategyKeyword_2_0 = (Keyword)cFixedPriorityStrategyEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cHillClimbingStrategyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cHillClimbingStrategyHillClimbingStrategyKeyword_3_0 = (Keyword)cHillClimbingStrategyEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum StrategyType:
		//	DfsStrategy | BfsStrategy | FixedPriorityStrategy |
		//	HillClimbingStrategy;
		public EnumRule getRule() { return rule; }
		
		//DfsStrategy | BfsStrategy | FixedPriorityStrategy | HillClimbingStrategy
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DfsStrategy
		public EnumLiteralDeclaration getDfsStrategyEnumLiteralDeclaration_0() { return cDfsStrategyEnumLiteralDeclaration_0; }
		
		//'DfsStrategy'
		public Keyword getDfsStrategyDfsStrategyKeyword_0_0() { return cDfsStrategyDfsStrategyKeyword_0_0; }
		
		//BfsStrategy
		public EnumLiteralDeclaration getBfsStrategyEnumLiteralDeclaration_1() { return cBfsStrategyEnumLiteralDeclaration_1; }
		
		//'BfsStrategy'
		public Keyword getBfsStrategyBfsStrategyKeyword_1_0() { return cBfsStrategyBfsStrategyKeyword_1_0; }
		
		//FixedPriorityStrategy
		public EnumLiteralDeclaration getFixedPriorityStrategyEnumLiteralDeclaration_2() { return cFixedPriorityStrategyEnumLiteralDeclaration_2; }
		
		//'FixedPriorityStrategy'
		public Keyword getFixedPriorityStrategyFixedPriorityStrategyKeyword_2_0() { return cFixedPriorityStrategyFixedPriorityStrategyKeyword_2_0; }
		
		//HillClimbingStrategy
		public EnumLiteralDeclaration getHillClimbingStrategyEnumLiteralDeclaration_3() { return cHillClimbingStrategyEnumLiteralDeclaration_3; }
		
		//'HillClimbingStrategy'
		public Keyword getHillClimbingStrategyHillClimbingStrategyKeyword_3_0() { return cHillClimbingStrategyHillClimbingStrategyKeyword_3_0; }
	}
	public class ComparatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.Comparators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHIGHER_IS_BETTEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHIGHER_IS_BETTERHIGHER_IS_BETTERKeyword_0_0 = (Keyword)cHIGHER_IS_BETTEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOWER_IS_BETTEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOWER_IS_BETTERLOWER_IS_BETTERKeyword_1_0 = (Keyword)cLOWER_IS_BETTEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDIFFERENCE_TO_ZERO_IS_BETTEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDIFFERENCE_TO_ZERO_IS_BETTERDIFFERENCE_TO_ZERO_IS_BETTERKeyword_2_0 = (Keyword)cDIFFERENCE_TO_ZERO_IS_BETTEREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Comparators:
		//	HIGHER_IS_BETTER | LOWER_IS_BETTER |
		//	DIFFERENCE_TO_ZERO_IS_BETTER;
		public EnumRule getRule() { return rule; }
		
		//HIGHER_IS_BETTER | LOWER_IS_BETTER | DIFFERENCE_TO_ZERO_IS_BETTER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HIGHER_IS_BETTER
		public EnumLiteralDeclaration getHIGHER_IS_BETTEREnumLiteralDeclaration_0() { return cHIGHER_IS_BETTEREnumLiteralDeclaration_0; }
		
		//'HIGHER_IS_BETTER'
		public Keyword getHIGHER_IS_BETTERHIGHER_IS_BETTERKeyword_0_0() { return cHIGHER_IS_BETTERHIGHER_IS_BETTERKeyword_0_0; }
		
		//LOWER_IS_BETTER
		public EnumLiteralDeclaration getLOWER_IS_BETTEREnumLiteralDeclaration_1() { return cLOWER_IS_BETTEREnumLiteralDeclaration_1; }
		
		//'LOWER_IS_BETTER'
		public Keyword getLOWER_IS_BETTERLOWER_IS_BETTERKeyword_1_0() { return cLOWER_IS_BETTERLOWER_IS_BETTERKeyword_1_0; }
		
		//DIFFERENCE_TO_ZERO_IS_BETTER
		public EnumLiteralDeclaration getDIFFERENCE_TO_ZERO_IS_BETTEREnumLiteralDeclaration_2() { return cDIFFERENCE_TO_ZERO_IS_BETTEREnumLiteralDeclaration_2; }
		
		//'DIFFERENCE_TO_ZERO_IS_BETTER'
		public Keyword getDIFFERENCE_TO_ZERO_IS_BETTERDIFFERENCE_TO_ZERO_IS_BETTERKeyword_2_0() { return cDIFFERENCE_TO_ZERO_IS_BETTERDIFFERENCE_TO_ZERO_IS_BETTERKeyword_2_0; }
	}
	public class ModelQueryTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.ModelQueryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMUST_HAVE_MATCHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMUST_HAVE_MATCHMUST_HAVE_MATCHKeyword_0_0 = (Keyword)cMUST_HAVE_MATCHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNO_MATCHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNO_MATCHNO_MATCHKeyword_1_0 = (Keyword)cNO_MATCHEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ModelQueryType:
		//	MUST_HAVE_MATCH | NO_MATCH;
		public EnumRule getRule() { return rule; }
		
		//MUST_HAVE_MATCH | NO_MATCH
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MUST_HAVE_MATCH
		public EnumLiteralDeclaration getMUST_HAVE_MATCHEnumLiteralDeclaration_0() { return cMUST_HAVE_MATCHEnumLiteralDeclaration_0; }
		
		//'MUST_HAVE_MATCH'
		public Keyword getMUST_HAVE_MATCHMUST_HAVE_MATCHKeyword_0_0() { return cMUST_HAVE_MATCHMUST_HAVE_MATCHKeyword_0_0; }
		
		//NO_MATCH
		public EnumLiteralDeclaration getNO_MATCHEnumLiteralDeclaration_1() { return cNO_MATCHEnumLiteralDeclaration_1; }
		
		//'NO_MATCH'
		public Keyword getNO_MATCHNO_MATCHKeyword_1_0() { return cNO_MATCHNO_MATCHKeyword_1_0; }
	}
	public class EvolutionStrategyTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.dse.Ddsl.EvolutionStrategyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNsga2EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNsga2Nsga2Keyword_0_0 = (Keyword)cNsga2EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPesaEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPesaPesaKeyword_1_0 = (Keyword)cPesaEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EvolutionStrategyType:
		//	Nsga2 | Pesa;
		public EnumRule getRule() { return rule; }
		
		//Nsga2 | Pesa
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Nsga2
		public EnumLiteralDeclaration getNsga2EnumLiteralDeclaration_0() { return cNsga2EnumLiteralDeclaration_0; }
		
		//'Nsga2'
		public Keyword getNsga2Nsga2Keyword_0_0() { return cNsga2Nsga2Keyword_0_0; }
		
		//Pesa
		public EnumLiteralDeclaration getPesaEnumLiteralDeclaration_1() { return cPesaEnumLiteralDeclaration_1; }
		
		//'Pesa'
		public Keyword getPesaPesaKeyword_1_0() { return cPesaPesaKeyword_1_0; }
	}
	
	private final DomainModelElements pDomainModel;
	private final DseExecutionModelElements pDseExecutionModel;
	private final DseProblemElements pDseProblem;
	private final ConfigurationElements pConfiguration;
	private final BaseStrategyElements pBaseStrategy;
	private final StrategyElements pStrategy;
	private final Constraint_ImplElements pConstraint_Impl;
	private final InitialModelElements pInitialModel;
	private final MetaModelElements pMetaModel;
	private final BaseObjective_ImplElements pBaseObjective_Impl;
	private final TransformationRuleElements pTransformationRule;
	private final StateCoderElements pStateCoder;
	private final ConstraintsObjectiveElements pConstraintsObjective;
	private final QueryConstraintElements pQueryConstraint;
	private final SolutionStoreElements pSolutionStore;
	private final DseImport_ImplElements pDseImport_Impl;
	private final EvolutionaryStrategyBuilderElements pEvolutionaryStrategyBuilder;
	private final TypeElements pType;
	private final DseProblemComponentElements pDseProblemComponent;
	private final ConstraintElements pConstraint;
	private final BaseObjectiveElements pBaseObjective;
	private final Type_ImplElements pType_Impl;
	private final IMutationRateElements pIMutationRate;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final StrategyTypeElements eStrategyType;
	private final EDoubleElements pEDouble;
	private final ComparatorsElements eComparators;
	private final ModelQueryTypeElements eModelQueryType;
	private final EBooleanElements pEBoolean;
	private final EvolutionStrategyTypeElements eEvolutionStrategyType;
	private final EFloatElements pEFloat;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DdslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainModel = new DomainModelElements();
		this.pDseExecutionModel = new DseExecutionModelElements();
		this.pDseProblem = new DseProblemElements();
		this.pConfiguration = new ConfigurationElements();
		this.pBaseStrategy = new BaseStrategyElements();
		this.pStrategy = new StrategyElements();
		this.pConstraint_Impl = new Constraint_ImplElements();
		this.pInitialModel = new InitialModelElements();
		this.pMetaModel = new MetaModelElements();
		this.pBaseObjective_Impl = new BaseObjective_ImplElements();
		this.pTransformationRule = new TransformationRuleElements();
		this.pStateCoder = new StateCoderElements();
		this.pConstraintsObjective = new ConstraintsObjectiveElements();
		this.pQueryConstraint = new QueryConstraintElements();
		this.pSolutionStore = new SolutionStoreElements();
		this.pDseImport_Impl = new DseImport_ImplElements();
		this.pEvolutionaryStrategyBuilder = new EvolutionaryStrategyBuilderElements();
		this.pType = new TypeElements();
		this.pDseProblemComponent = new DseProblemComponentElements();
		this.pConstraint = new ConstraintElements();
		this.pBaseObjective = new BaseObjectiveElements();
		this.pType_Impl = new Type_ImplElements();
		this.pIMutationRate = new IMutationRateElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.eStrategyType = new StrategyTypeElements();
		this.pEDouble = new EDoubleElements();
		this.eComparators = new ComparatorsElements();
		this.eModelQueryType = new ModelQueryTypeElements();
		this.pEBoolean = new EBooleanElements();
		this.eEvolutionStrategyType = new EvolutionStrategyTypeElements();
		this.pEFloat = new EFloatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.viatra.dse.Ddsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DomainModel:
	//	type+=Type*;
	public DomainModelElements getDomainModelAccess() {
		return pDomainModel;
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}
	
	//DseExecutionModel:
	//	{DseExecutionModel}
	//	'ExecutionModel'
	//	name=ID ':' ('packageName' packageName=EString)? ('configurations' '(' configurations+=[Configuration|EString] (","
	//	configurations+=[Configuration|EString])* ')')?
	//	dseproblems+=[DseProblem]* ('runs' numberOfRuns=EInt)? ('dseproblemcomponents' '('
	//	dseproblemcomponents+=[DseProblemComponent|EString] (","
	//	dseproblemcomponents+=[DseProblemComponent|EString])* ')')?
	//	';';
	public DseExecutionModelElements getDseExecutionModelAccess() {
		return pDseExecutionModel;
	}
	
	public ParserRule getDseExecutionModelRule() {
		return getDseExecutionModelAccess().getRule();
	}
	
	//DseProblem:
	//	'Problem'
	//	name=ID ':' ('imports' ':' imports+=EString (',' imports+=EString)* ';'?)? ('Configuration' ':'
	//	configurations=[Configuration|EString])? ('Constraint' ':' constraints+=[Constraint] (","
	//	constraints+=[Constraint])*)? ('InitialModel' ':' initialmodel=[InitialModel])? ('MetaModel' ':'
	//	metamodel=[MetaModel|EString])?
	//	'objectives' ':' objectives+=[BaseObjective|EString] (',' objectives+=[BaseObjective])*
	//	'Rules' ':' transformationrules+=[TransformationRule] (',' transformationrules+=[TransformationRule])* ('StateCoder'
	//	':' statecoder=[StateCoder])? ('SolutionStore' ':' solutionstore=[SolutionStore])? ';';
	public DseProblemElements getDseProblemAccess() {
		return pDseProblem;
	}
	
	public ParserRule getDseProblemRule() {
		return getDseProblemAccess().getRule();
	}
	
	//Configuration:
	//	{Configuration}
	//	'Configuration'
	//	name=ID ':' ('maxNumberOfThreads' '=' maxNumberOfThreads=EInt)? ('dseproblems' '(' dseproblems+=[DseProblem|EString]
	//	("," dseproblems+=[DseProblem|EString])* ')')?
	//	strategy=[BaseStrategy|EString]?
	//	';';
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//BaseStrategy:
	//	Strategy | EvolutionaryStrategyBuilder;
	public BaseStrategyElements getBaseStrategyAccess() {
		return pBaseStrategy;
	}
	
	public ParserRule getBaseStrategyRule() {
		return getBaseStrategyAccess().getRule();
	}
	
	//Strategy:
	//	{Strategy}
	//	'Strategy'
	//	name=ID ':'
	//	type=StrategyType ('(' depth=EInt ')')?
	//	';';
	public StrategyElements getStrategyAccess() {
		return pStrategy;
	}
	
	public ParserRule getStrategyRule() {
		return getStrategyAccess().getRule();
	}
	
	//Constraint_Impl Constraint:
	//	{Constraint}
	//	'Constraint' constraintName=ID
	public Constraint_ImplElements getConstraint_ImplAccess() {
		return pConstraint_Impl;
	}
	
	public ParserRule getConstraint_ImplRule() {
		return getConstraint_ImplAccess().getRule();
	}
	
	//InitialModel:
	//	{InitialModel}
	//	'InitialModel'
	//	name=ID ':'
	//	path=EString?
	//	';';
	public InitialModelElements getInitialModelAccess() {
		return pInitialModel;
	}
	
	public ParserRule getInitialModelRule() {
		return getInitialModelAccess().getRule();
	}
	
	//MetaModel:
	//	{MetaModel}
	//	'MetaModel' name=EString ';';
	public MetaModelElements getMetaModelAccess() {
		return pMetaModel;
	}
	
	public ParserRule getMetaModelRule() {
		return getMetaModelAccess().getRule();
	}
	
	//BaseObjective_Impl BaseObjective:
	//	{BaseObjective}
	//	'BaseObjective'
	//	name=ID
	//	':'?
	//	fitnessConstraint=EDouble?
	//	comparator=Comparators?
	//	';'
	public BaseObjective_ImplElements getBaseObjective_ImplAccess() {
		return pBaseObjective_Impl;
	}
	
	public ParserRule getBaseObjective_ImplRule() {
		return getBaseObjective_ImplAccess().getRule();
	}
	
	//TransformationRule:
	//	{TransformationRule}
	//	'Rule'
	//	name=ID ':'
	//	className=EString '.' methodName=EString '()' ';';
	public TransformationRuleElements getTransformationRuleAccess() {
		return pTransformationRule;
	}
	
	public ParserRule getTransformationRuleRule() {
		return getTransformationRuleAccess().getRule();
	}
	
	//StateCoder:
	//	{StateCoder}
	//	'StateCoder'
	//	name=ID ';';
	public StateCoderElements getStateCoderAccess() {
		return pStateCoder;
	}
	
	public ParserRule getStateCoderRule() {
		return getStateCoderAccess().getRule();
	}
	
	//ConstraintsObjective:
	//	{ConstraintsObjective}
	//	'ConstraintsObjective'
	//	name=ID ':'
	//	fitnessConstraint=EDouble? ('hardConstraints' hardConstraints+=QueryConstraint)* ('softConstraints'
	//	softConstraints+=QueryConstraint)*
	//	comparator=Comparators?
	//	';';
	public ConstraintsObjectiveElements getConstraintsObjectiveAccess() {
		return pConstraintsObjective;
	}
	
	public ParserRule getConstraintsObjectiveRule() {
		return getConstraintsObjectiveAccess().getRule();
	}
	
	//QueryConstraint:
	//	{QueryConstraint}
	//	'('
	//	name=ID (',' constraintName=EString)? (',' weight=EDouble)? (',' type=ModelQueryType)?
	//	')';
	public QueryConstraintElements getQueryConstraintAccess() {
		return pQueryConstraint;
	}
	
	public ParserRule getQueryConstraintRule() {
		return getQueryConstraintAccess().getRule();
	}
	
	//SolutionStore:
	//	{SolutionStore}
	//	'SolutionStore'
	//	name=ID ':'
	//	foundSolutions=EInt?
	//	acceptAnySolutions?='acceptAnySolutions'?
	//	storeBestSolutionsOnly?='storeBestSolutionsOnly'?
	//	logSolutionsWhenFound?='logSolutionsWhenFound'?
	//	registerSolutionFoundHandler?='registerSolutionFoundHandler'?
	//	';';
	public SolutionStoreElements getSolutionStoreAccess() {
		return pSolutionStore;
	}
	
	public ParserRule getSolutionStoreRule() {
		return getSolutionStoreAccess().getRule();
	}
	
	//DseImport_Impl DseImport:
	//	{DseImport}
	//	'DseImport'
	//	imports+=EString*
	public DseImport_ImplElements getDseImport_ImplAccess() {
		return pDseImport_Impl;
	}
	
	public ParserRule getDseImport_ImplRule() {
		return getDseImport_ImplAccess().getRule();
	}
	
	//EvolutionaryStrategyBuilder:
	//	{EvolutionaryStrategyBuilder}
	//	'EvolutionaryStrategyBuilder'
	//	name=ID ':'
	//	populationSize=EInt?
	//	type=EvolutionStrategyType? ('crossOvers' '(' crossOvers+=EString ("," crossOvers+=EString)* ')')? ('mutations' '('
	//	mutations+=[IMutationRate] ("," mutations+=[IMutationRate])* ')')?
	//	';';
	public EvolutionaryStrategyBuilderElements getEvolutionaryStrategyBuilderAccess() {
		return pEvolutionaryStrategyBuilder;
	}
	
	public ParserRule getEvolutionaryStrategyBuilderRule() {
		return getEvolutionaryStrategyBuilderAccess().getRule();
	}
	
	//Type:
	//	Type_Impl | DseExecutionModel | DseProblem | Configuration | Strategy | Constraint_Impl | InitialModel | MetaModel |
	//	BaseObjective_Impl | TransformationRule | StateCoder | ConstraintsObjective | QueryConstraint | SolutionStore |
	//	DseImport_Impl | EvolutionaryStrategyBuilder | IMutationRate;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//DseProblemComponent:
	//	Constraint_Impl | InitialModel | MetaModel | BaseObjective_Impl | TransformationRule | StateCoder |
	//	ConstraintsObjective | QueryConstraint | SolutionStore;
	public DseProblemComponentElements getDseProblemComponentAccess() {
		return pDseProblemComponent;
	}
	
	public ParserRule getDseProblemComponentRule() {
		return getDseProblemComponentAccess().getRule();
	}
	
	//Constraint:
	//	Constraint_Impl | QueryConstraint;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//BaseObjective:
	//	BaseObjective_Impl | ConstraintsObjective;
	public BaseObjectiveElements getBaseObjectiveAccess() {
		return pBaseObjective;
	}
	
	public ParserRule getBaseObjectiveRule() {
		return getBaseObjectiveAccess().getRule();
	}
	
	//Type_Impl Type:
	//	{Type}
	//	'Type'
	public Type_ImplElements getType_ImplAccess() {
		return pType_Impl;
	}
	
	public ParserRule getType_ImplRule() {
		return getType_ImplAccess().getRule();
	}
	
	//IMutationRate:
	//	{IMutationRate}
	//	'Mutation' name=ID '(' weight=EInt? ')' ';';
	public IMutationRateElements getIMutationRateAccess() {
		return pIMutationRate;
	}
	
	public ParserRule getIMutationRateRule() {
		return getIMutationRateAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//enum StrategyType:
	//	DfsStrategy | BfsStrategy | FixedPriorityStrategy |
	//	HillClimbingStrategy;
	public StrategyTypeElements getStrategyTypeAccess() {
		return eStrategyType;
	}
	
	public EnumRule getStrategyTypeRule() {
		return getStrategyTypeAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//enum Comparators:
	//	HIGHER_IS_BETTER | LOWER_IS_BETTER |
	//	DIFFERENCE_TO_ZERO_IS_BETTER;
	public ComparatorsElements getComparatorsAccess() {
		return eComparators;
	}
	
	public EnumRule getComparatorsRule() {
		return getComparatorsAccess().getRule();
	}
	
	//enum ModelQueryType:
	//	MUST_HAVE_MATCH | NO_MATCH;
	public ModelQueryTypeElements getModelQueryTypeAccess() {
		return eModelQueryType;
	}
	
	public EnumRule getModelQueryTypeRule() {
		return getModelQueryTypeAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//enum EvolutionStrategyType:
	//	Nsga2 | Pesa;
	public EvolutionStrategyTypeElements getEvolutionStrategyTypeAccess() {
		return eEvolutionStrategyType;
	}
	
	public EnumRule getEvolutionStrategyTypeRule() {
		return getEvolutionStrategyTypeAccess().getRule();
	}
	
	//EFloat ecore::EFloat:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
