package org.eclipse.viatra.dse.generator
/*
 * generated by Xtext 2.10.0
 */

import java.util.HashSet
import java.util.Set
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.viatra.dse.dsl.model.DseExecutionModel
import org.eclipse.viatra.dse.dsl.model.DseProblem
import org.eclipse.viatra.dse.dsl.model.ConstraintsObjective
import org.eclipse.viatra.dse.dsl.model.Strategy
import org.eclipse.viatra.dse.dsl.model.StrategyType
import org.eclipse.viatra.dse.dsl.model.EvolutionaryStrategyBuilder
import org.eclipse.viatra.dse.dsl.model.EvolutionStrategyType

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DdslGenerator extends AbstractGenerator {

    static Set<String> set;

    new() {
        set = new HashSet<String>();
        set.add("java.io.IOException")
        set.add("java.io.PrintWriter")
        set.add("java.io.File")
        set.add("org.eclipse.viatra.dse.evolutionary.EvolutionaryStrategyBuilder")
        set.add("org.eclipse.emf.ecore.EObject")
        set.add("org.eclipse.viatra.dse.api.DesignSpaceExplorer")
        set.add("org.eclipse.viatra.dse.api.Strategies")
        set.add("org.eclipse.viatra.dse.objectives.Comparators")
        set.add("org.eclipse.viatra.dse.objectives.impl.ConstraintsObjective")
        set.add("org.eclipse.viatra.dse.solutionstore.SolutionStore")
        set.add("org.eclipse.viatra.query.runtime.exception.ViatraQueryException")
        set.add("org.eclipse.viatra.dse.statecoding.simple.SimpleStateCoderFactory")
        set.add("org.junit.Test")
        set.add("org.eclipse.emf.ecore.EObject")
        set.add("org.eclipse.emf.ecore.EPackage")
        set.add("com.google.common.base.Stopwatch")
        set.add("java.io.FileWriter")
    }

    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        for (model : resource.allContents.filter(DseExecutionModel).toIterable) {

            fsa.generateFile(getPackageDeclaration(model.packageName) + '/DseExecution' + model.name + '.java',
                createClass(model))
        }
    }

    def static getPackageDeclaration(String strPackage) {
        var String[] segments = strPackage.split("\\.")
        var count = strPackage.length - strPackage.replace(".", "").length;
        var newPackage = ""
        println(count)
        if (count > 0) {
            for (segment : segments) {
                println(segment)
                newPackage = newPackage + "/" + segment
            }
        }
        return newPackage
    }

    /*Templates start here */
    def static firstLetterToUpper(String str) {
        return str.substring(0, 1).toUpperCase + str.substring(1)
    }

    def static createRuleName(String methodName) {
        return "rule" + methodName.replaceAll("[.]", "")
    }

    def static addImports(DseProblem problem) {
        for (imports : problem.imports) {
            set.add(imports)
        }
        for (imp : set) {
            println(imp)
        }
    }

    def static createImports() '''        
        «FOR imp : set»
            import «imp»;
        «ENDFOR»
        
    '''

    def static createDseInicialization(DseProblem problem) ''' 
        «IF problem.initialmodel.path.contains("(")»
            EObject model = «problem.initialmodel.path»;
        «ELSE»
            EObject model = «problem.initialmodel.path»();
        «ENDIF»
        
        DesignSpaceExplorer dse = new DesignSpaceExplorer();
        dse.setInitialModel(model);
        
        dse.addMetaModelPackage(EPackage.Registry.INSTANCE.getEPackage("«problem.metamodel.name»"));
        «IF problem.statecoder!=null»
            dse.setStateCoderFactory(new «problem.statecoder.name»());
        «ENDIF»
        «IF problem.statecoder == null»
            dse.setStateCoderFactory(new SimpleStateCoderFactory(dse.getMetaModelPackages()));
        «ENDIF»
    '''

    def static createDseRules(DseProblem problem) '''
        
        «FOR rule : problem.transformationrules»
            «rule.className» «createRuleName(rule.methodName)» = new «rule.className»();
            dse.addTransformationRule(«createRuleName(rule.methodName)».«rule.methodName»);
        «ENDFOR»
    '''

    def static createDseObjectives(DseProblem problem) '''
        «FOR objective : problem.objectives»
            «IF objective instanceof ConstraintsObjective»
                dse.addObjective(new ConstraintsObjective()
                «FOR hardObjective : objective.hardConstraints»
                    .withHardConstraint("«hardObjective.name»", «firstLetterToUpper(hardObjective.constraintName)»QuerySpecification.instance())
                «ENDFOR»
                «FOR softObjective : objective.softConstraints»
                    .withSoftConstraint("«softObjective.name»", «firstLetterToUpper(softObjective.constraintName)»QuerySpecification.instance(), «softObjective.weight»)
                «ENDFOR»
                .withComparator(Comparators.«objective.comparator»)
                );
            «ENDIF»
            «IF !(objective instanceof ConstraintsObjective)»
                dse.addObjective(new «objective.name»());
            «ENDIF»
        «ENDFOR»
    '''

    def static createDseSolutionStore(DseProblem problem) '''
        dse.setSolutionStore(new SolutionStore()
        «IF problem.solutionstore!=null»
            «IF problem.solutionstore.isStoreBestSolutionsOnly »
                .storeBestSolutionsOnly()
            «ENDIF»
            «IF problem.solutionstore.isAcceptAnySolutions»
                .acceptAnySolutions()
            «ENDIF»
            «IF problem.solutionstore.isLogSolutionsWhenFound»
                .logSolutionsWhenFound()
            «ENDIF»
            «IF problem.solutionstore.isRegisterSolutionFoundHandler»
            «ENDIF»
        «ENDIF»
        );
    '''

    def static createStategy(DseProblem problem) '''
        «IF (problem.configurations.strategy as Strategy).type == StrategyType.BFS_STRATEGY»
            dse.startExploration(Strategies.createBfsStrategy(«IF ((problem.configurations.strategy as Strategy).depth >0)»«(problem.configurations.strategy as Strategy).depth»«ENDIF»));
        «ENDIF»
        «IF (problem.configurations.strategy as Strategy).type == StrategyType.DFS_STRATEGY»
            dse.startExploration(Strategies.createDfsStrategy(«IF((problem.configurations.strategy as Strategy).depth >0)»«(problem.configurations.strategy as Strategy).depth»«ENDIF»));
        «ENDIF»
        «IF (problem.configurations.strategy as Strategy).type == StrategyType.FIXED_PRIORITY_STRATEGY»
            dse.startExploration(Strategies.createFixedPriorityStrategy(«IF((problem.configurations.strategy as Strategy).depth >0)»«(problem.configurations.strategy as Strategy).depth»«ENDIF»));
        «ENDIF»
        «IF (problem.configurations.strategy as Strategy).type == StrategyType.HILL_CLIMBING_STRATEGY»
            dse.startExploration(Strategies.creatHillClimbingStrategy());
        «ENDIF»
    '''

    def static createEvolutionStrategy(DseProblem problem) '''
        «IF (problem.configurations.strategy as EvolutionaryStrategyBuilder).type == EvolutionStrategyType.NSGA2»
            EvolutionaryStrategyBuilder nsga2 = EvolutionaryStrategyBuilder.createNsga2BuilderFull(«(problem.configurations.strategy as EvolutionaryStrategyBuilder).populationSize»);
        «ELSE»
            EvolutionaryStrategyBuilder nsga2 = EvolutionaryStrategyBuilder.createPesaBuilderFull(«(problem.configurations.strategy as EvolutionaryStrategyBuilder).populationSize»);
        «ENDIF»
        
        «FOR mutation : (problem.configurations.strategy as EvolutionaryStrategyBuilder).mutations»
            nsga2.addMutation(new «mutation.name»() «IF mutation.weight>0», «mutation.weight» «ENDIF»);
        «ENDFOR»
        
        «FOR crossover : (problem.configurations.strategy as EvolutionaryStrategyBuilder).crossOvers»
            nsga2.addCrossover(new «crossover»());
        «ENDFOR»
        dse.startExploration(nsga2.build());
    '''

//Size there is still a lot here
    def static createConfiguration(DseProblem problem) '''
        «IF problem.configurations.strategy!=null»
            «IF problem.configurations.strategy instanceof Strategy»
                «createStategy(problem)»
            «ELSE»
                «createEvolutionStrategy(problem)»
            «ENDIF»
        «ENDIF»
    '''

    def static createRunMethod(DseProblem problem) '''
        public void run«problem.name»(Boolean isFirstRun)throws IOException, ViatraQueryException{
                        
            «createDseInicialization(problem)»
            
            «createDseRules(problem)»
            
            «createDseObjectives(problem)»
            
            «createDseSolutionStore(problem)»
            
            «createConfiguration(problem)»
            if(isFirstRun){
                System.out.println(dse.toStringSolutions());
            }
            
        }
    '''

    def static createTestMethod(DseExecutionModel model) '''
        @SuppressWarnings("deprecation")
        @Test
        public void executeProblems() throws IOException, ViatraQueryException{
            PrintWriter pw = new PrintWriter(new File("«model.name»_results.csv"));
            StringBuilder sb = new StringBuilder();
            Stopwatch watch = new Stopwatch();        
            long time = 0;
              
            sb.append("number of runs");
            sb.append(';');
            sb.append("name of the problem");
            sb.append(';');
            sb.append("seconds");
            sb.append(';');
            sb.append("miliseconds");
            sb.append(';');
            sb.append("avarage");
            sb.append("\n");
            «FOR problem : model.dseproblems»
                  
                time = 0;
                for(int i = 0; i< «model.numberOfRuns»;i++){
                    watch.reset();
                    watch.start();
                    if(i == 0){
                        run«problem.name»(true);
                    }else{
                        run«problem.name»(false);
                    }
                    watch.stop();
                    
                    long timeElapsed = watch.elapsedMillis();
                    long s = timeElapsed/1000;
                    long ms = timeElapsed - s*1000;
                    time += watch.elapsedMillis();
                    long avg = time/(i+1);
                    sb.append(i+1);
                    sb.append(';');
                       sb.append("«problem.name»");
                    sb.append(";");
                    sb.append(s);
                    sb.append(";");
                    sb.append(ms);
                    sb.append(";");
                    sb.append(avg);
                    sb.append("\n");
                    
                    System.out.println("seconds: " + s + " ms: " + ms);
                }
                sb.append("\n");                
            «ENDFOR»
            pw.write(sb.toString());
            pw.close();
        }
        '''

    def static createClass(DseExecutionModel model) '''
    package «model.packageName»;
    
    «FOR problem : model.dseproblems»
        «addImports(problem)»
    «ENDFOR»        
    
    «createImports()»
    
    public class DseExecution«model.name»{
        «FOR problem : model.dseproblems»    
            «createRunMethod(problem)»
        «ENDFOR»

        «createTestMethod(model)»
    }
    '''

    def getOutputConfigurations() {
        throw new UnsupportedOperationException("TODO: auto-generated method stub")

    }
}
