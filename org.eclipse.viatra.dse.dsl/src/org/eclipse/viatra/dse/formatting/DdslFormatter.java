/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.viatra.dse.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.util.Pair;

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class DdslFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
		org.eclipse.viatra.dse.services.DdslGrammarAccess f = (org.eclipse.viatra.dse.services.DdslGrammarAccess) getGrammarAccess();
		for (Keyword semicolon : f.findKeywords(";")) {
			c.setNoSpace().before(semicolon);
        	c.setLinewrap(2).after(semicolon);
		}

		for (Keyword colon : f.findKeywords(":")) {
			c.setNoSpace().before(colon);
			// c.setLinewrap(1).after(colon);
		}

		for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("(", ")")) {
			c.setNoSpace().around(pair.getFirst());
			c.setNoSpace().before(pair.getSecond());
		}

		for (Keyword comma : f.findKeywords(",")) {
			c.setNoSpace().before(comma);
		}
		for (Keyword dot : f.findKeywords(".")) {
			c.setNoSpace().around(dot);
		}
		for (Keyword leftBrace : f.findKeywords("(")) {
			c.setNoSpace().before(leftBrace);
		}

		// /*Query Constraint*/


		/* ConstraintObjective */

		c.setLinewrap(1).after(f.getConstraintsObjectiveAccess().getColonKeyword_3());
		// Setting Indentation between : ;
		c.setIndentationIncrement().after(f.getConstraintsObjectiveAccess().getColonKeyword_3());
		c.setIndentationDecrement().before(f.getConstraintsObjectiveAccess().getSemicolonKeyword_8());
		// Lines after each rule:

		c.setLinewrap(1).after(f.getConstraintsObjectiveAccess().getSoftConstraintsAssignment_6_1());
		c.setLinewrap(1).after(f.getConstraintsObjectiveAccess().getSoftConstraintsAssignment_6_1());
		
		c.setLinewrap(1).after(f.getConstraintsObjectiveAccess().getHardConstraintsAssignment_5_1());

		c.setLinewrap(1).after(f.getConstraintsObjectiveAccess().getComparatorAssignment_7());
		c.setLinewrap(1).after(f.getConstraintsObjectiveAccess().getFitnessConstraintAssignment_4());

		/* DseProblem */

		// Adding a Line in DseProblem after the first colon
		c.setLinewrap(1).after(f.getDseProblemAccess().getColonKeyword_2());

		// Setting Indentation between : ;
		c.setIndentationIncrement().after(f.getDseProblemAccess().getColonKeyword_2());
		c.setIndentationDecrement().before(f.getDseProblemAccess().getSemicolonKeyword_18());

		// Identation for imports
		c.setLinewrap(1).after(f.getDseProblemAccess().getColonKeyword_3_1());

		c.setIndentationIncrement().before(f.getDseProblemAccess().getImportsAssignment_3_2());
		c.setIndentationDecrement().after(f.getDseProblemAccess().getImportsAssignment_3_2());

		c.setIndentationIncrement().before(f.getDseProblemAccess().getImportsAssignment_3_3_1());
		c.setIndentationDecrement().after(f.getDseProblemAccess().getImportsAssignment_3_3_1());

		c.setLinewrap(1).after(f.getDseProblemAccess().getImportsAssignment_3_2());
		c.setLinewrap(1).after(f.getDseProblemAccess().getImportsAssignment_3_3_1());

		// Setting lines after each rule
		c.setLinewrap().after(f.getDseProblemAccess().getConfigurationsAssignment_4_2());
		c.setLinewrap().after(f.getDseProblemAccess().getInitialmodelAssignment_6_2());
		c.setLinewrap().after(f.getDseProblemAccess().getMetamodelAssignment_7_2());
		c.setLinewrap().after(f.getDseProblemAccess().getObjectivesAssignment_10());
		c.setLinewrap().after(f.getDseProblemAccess().getObjectivesAssignment_11_1());
		c.setLinewrap().after(f.getDseProblemAccess().getTransformationrulesAssignment_14());
		c.setLinewrap().after(f.getDseProblemAccess().getTransformationrulesAssignment_15_1());
		c.setLinewrap().after(f.getDseProblemAccess().getStatecoderAssignment_16_2());
		c.setLinewrap().after(f.getDseProblemAccess().getSolutionstoreAssignment_17_2());
		/* DseExecutionModel */
		c.setIndentationIncrement().after(f.getDseExecutionModelAccess().getColonKeyword_3());
		c.setIndentationDecrement().before(f.getDseExecutionModelAccess().getSemicolonKeyword_9());
		// Setting the lines:
		c.setLinewrap(1).after(f.getDseExecutionModelAccess().getColonKeyword_3());
		c.setLinewrap().after(f.getDseExecutionModelAccess().getConfigurationsAssignment_5_2());
		c.setLinewrap().after(f.getDseExecutionModelAccess().getConfigurationsAssignment_5_3_1());
		c.setLinewrap().after(f.getDseExecutionModelAccess().getDseproblemcomponentsAssignment_8_2());
		c.setLinewrap().after(f.getDseExecutionModelAccess().getDseproblemcomponentsAssignment_8_3_1());
		c.setLinewrap().after(f.getDseExecutionModelAccess().getDseproblemsAssignment_6());
		c.setLinewrap().after(f.getDseExecutionModelAccess().getPackageNameAssignment_4_1());

		/*Rules*
		 Set no space arouond parenthesis */
		c.setNoSpace().around(f.getTransformationRuleAccess().getLeftParenthesisRightParenthesisKeyword_7());
	}
}
